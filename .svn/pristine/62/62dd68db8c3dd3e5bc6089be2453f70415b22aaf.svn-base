package com.fuexpress.kr.ui.activity.product_detail;

import android.app.Activity;
import android.content.Intent;
import android.os.Handler;
import android.os.SystemClock;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseHolder;
import com.fuexpress.kr.conf.Constants;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.model.ItemBean;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.activity.PhotoViewActivity;
import com.fuexpress.kr.ui.uiutils.ImageLoaderHelper;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.fuexpress.kr.utils.TimeUtils;
import com.joooonho.SelectableRoundedImageView;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;

import java.util.ArrayList;
import java.util.List;

import fksproto.CsBase;
import fksproto.CsItem;

public class ProductDetailCommentHolder extends BaseHolder<ItemBean> implements View.OnClickListener {
    public static String TAG = "productdetailcommentholder";


    private View mRootView;
    private List<CsItem.Comment> mCommentsList;
    private List<CsBase.UserInfo> mCommentUserList;
    private int mIconPadding;

    private static Handler mHandler = new Handler();
    private DisplayImageOptions mImageOptions;

    private LinearLayout mLlCommentContainer;
    private EditText mEtCommentContent;
    private TextView mBtnCommentRelease;
    private ItemBean mItemBean;
    private TextView mTvLikerCount;
    private int commentCount;
    private TextView mTvShippingName;
    private TextView mTvShippingInfo;
    private String mCountryname;

    public ProductDetailCommentHolder(Activity context) {
        super(context);
    }

    @Override
    public View initView() {
        mRootView = View.inflate(mContext, R.layout.view_for_product_comment, null);
        mLlCommentContainer = (LinearLayout) mRootView.findViewById(R.id.ll_comment_container);
        mEtCommentContent = (EditText) mRootView.findViewById(R.id.et_comment_content);
        mBtnCommentRelease = (TextView) mRootView.findViewById(R.id.btn_comment_release);
        mTvLikerCount = (TextView) mRootView.findViewById(R.id.tv_liker_count);

        mRootView.findViewById(R.id.rl_product_detail).setOnClickListener(this);
        mRootView.findViewById(R.id.rl_shipping_current).setOnClickListener(this);
        mTvShippingName = (TextView) mRootView.findViewById(R.id.tv_shipping_name);
        mTvShippingInfo = (TextView) mRootView.findViewById(R.id.tv_shipping_info);
        return mRootView;
    }

    @Override
    public void initData(ItemBean itemBean) {
        mItemBean = itemBean;
        mIconPadding = UIUtils.dip2px(1);
        mImageOptions = ImageLoaderHelper.getInstance(mContext).getDisplayOptions();
        getComment(itemBean.getItemid());
        initEvent();
//        getProductShipping();
    }

    @Override
    public void initEvent() {
        mBtnCommentRelease.setOnClickListener(this);
    }


    public void getComment(long itemID) {
        CsItem.GetCommentListRequest.Builder builder = CsItem.GetCommentListRequest.newBuilder();
        builder.setItemId(itemID);
        NetEngine.postRequest(builder, new INetEngineListener<CsItem.GetCommentListResponse>() {

            @Override
            public void onSuccess(CsItem.GetCommentListResponse response) {
                mCommentsList = response.getCommentsList();
                mCommentUserList = response.getReviewersList();
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        showComments();
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {

            }
        });
    }


    public void posComment(long itemID) {
        boolean userLogin = AccountManager.getInstance().isUserLogin(mContext);
        if (!userLogin)
            return;

        if (TextUtils.isEmpty(mEtCommentContent.getText()))
            return;
        mBtnCommentRelease.setEnabled(false);
        CsItem.PostCommentRequest.Builder builder = CsItem.PostCommentRequest.newBuilder();
        builder.setItemId(itemID);
        builder.setContent(mEtCommentContent.getText().toString());
        NetEngine.postRequest(builder, new INetEngineListener<CsItem.PostCommentResponse>() {

            @Override
            public void onSuccess(CsItem.PostCommentResponse response) {
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        commentSucess();
                        mBtnCommentRelease.setEnabled(true);
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {

            }
        });
    }


    private void showComments() {
        String commmentCount = mContext.getString(R.string.String_comment_count);
        commentCount = mCommentsList.size();
        commmentCount = String.format(commmentCount, commentCount);
       /* mTvCommentCount.setText(commmentCount);
        if (mCommentsList.size() == 0) {
            mTvCommentCount.setVisibility(View.GONE);
        }*/

        for (int i = mCommentsList.size() - 1; i >= 0; i--) {
            View view = View.inflate(mContext, R.layout.item_for_product_comment, null);
            TextView com = (TextView) view.findViewById(R.id.tv_person_comment);
            TextView time = (TextView) view.findViewById(R.id.tv_comment_date);
            ImageView icon = (ImageView) view.findViewById(R.id.img_person_icon);
            LinearLayout commentImgs = (LinearLayout) view.findViewById(R.id.ll_imgs);
            icon.setCropToPadding(true);
            icon.setPadding(mIconPadding, mIconPadding, mIconPadding, mIconPadding);

            TextView name = (TextView) view.findViewById(R.id.tv_person_nicke_name);
            CsItem.Comment comment = mCommentsList.get(i);
            com.setText(comment.getContent());
            CsBase.UserInfo commentUser = null;
            int uin = comment.getUin();
            for (CsBase.UserInfo user : mCommentUserList) {
                if (uin == user.getUin()) {
                    commentUser = user;
                    name.setText(user.getNickname());
                    ImageLoader.getInstance().displayImage(user.getAvatar() + Constants.ImgUrlSuffix.small_9, icon, ImageLoaderHelper.getInstance(mContext).getDisplayOptionsIcon());
                }
            }
            time.setText(comment.getReviewTime());
            mLlCommentContainer.addView(view);
            showCommentImgs(comment, commentImgs);
            final CsBase.UserInfo finalUser = commentUser;
            icon.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    toMeActivity(finalUser);
                }
            });
        }
    }

    private void showCommentImgs(final CsItem.Comment comment, LinearLayout llCommentContainer) {
        if (comment.getImagesCount() > 0) {
            llCommentContainer.setVisibility(View.VISIBLE);
        } else {
            llCommentContainer.setVisibility(View.GONE);
        }

        int width = UIUtils.dip2px((float) 50);
        int marginLeft = UIUtils.dip2px((float) 8);
        int padding = UIUtils.dip2px((float) 1);
        int screenWidth = mContext.getWindowManager().getDefaultDisplay().getWidth();
        int mLikersItemCount = (screenWidth - 2 * marginLeft) / (width + marginLeft);
        mLikersItemCount = mLikersItemCount < comment.getImagesCount() ? mLikersItemCount : comment.getImagesCount();
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width, width);

        for (int i = 0; i < mLikersItemCount; i++) {
            ImageView img = new ImageView(mContext);
            img.setPadding(padding, padding, padding, padding);
            img.setCropToPadding(true);
            img.setBackground(mContext.getResources().getDrawable(R.drawable.shape_album_circle_bg));
            img.setImageDrawable(mContext.getResources().getDrawable(R.color.home_add_and_like_bg));
            img.setScaleType(ImageView.ScaleType.CENTER_CROP);
            params.setMargins(marginLeft, 0, 0, 0);
            llCommentContainer.addView(img, params);
            ImageLoader.getInstance().displayImage(comment.getImages(i).getImageUrl(), img, ImageLoaderHelper.getInstance(mContext).getDisplayOptionsIcon());
            final int finalI = i;
            img.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    goActivity(finalI, comment.getImagesList());
                }
            });
        }
    }

    protected void goActivity(int index, List<CsBase.ItemImage> itemImages) {
        Intent intent = new Intent(mContext, PhotoViewActivity.class);
        intent.putExtra(PhotoViewActivity.PAGE_INDEX, index);
        ArrayList<String> imgs = new ArrayList<String>();
        for (CsBase.ItemImage itemImage : itemImages) {
            imgs.add(itemImage.getImageUrl());
        }
        intent.putStringArrayListExtra(PhotoViewActivity.PAGE_IMAGES, imgs);
//        intent.putExtra(PhotoViewActivity.PAGE_INDEX, mVpItemImgs.getCurrentItem());
        mContext.startActivity(intent);
    }


    private void commentSucess() {
      /*  commentCount++;
        String count = mContext.getString(R.string.String_comment_count, commentCount);
        if (commentCount > 0) mTvCommentCount.setVisibility(View.VISIBLE);
        mTvCommentCount.setText(count);*/

        View view = View.inflate(mContext, R.layout.item_for_product_comment, null);
        TextView com = (TextView) view.findViewById(R.id.tv_person_comment);
        TextView name = (TextView) view.findViewById(R.id.tv_person_nicke_name);
        TextView time = (TextView) view.findViewById(R.id.tv_comment_date);
        ImageView icon = (ImageView) view.findViewById(R.id.img_person_icon);
        icon.setCropToPadding(true);
        icon.setPadding(mIconPadding, mIconPadding, mIconPadding, mIconPadding);

        icon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                toMeActivity(AccountManager.getInstance().userInfo);
            }
        });

        ImageLoader.getInstance().displayImage(AccountManager.getInstance().avater, icon, ImageLoaderHelper.getInstance(mContext).getDisplayOptionsIcon());
        name.setText(AccountManager.getInstance().nikename);
        com.setText(mEtCommentContent.getText().toString());
        time.setText(TimeUtils.getDateStyleStringByLong(System.currentTimeMillis()));
        mEtCommentContent.setText("");
        //mBtnCommentRelease.setEnabled(true);
        mLlCommentContainer.addView(view);
    }

    private void toMeActivity(CsBase.UserInfo user) {
        /*UserInfoBean userInfoBean = ClassUtil.conventUser2UserInfoBean(user);
        Intent intent = new Intent(mContext, PersonInfoActivity.class);
        intent.putExtra(MeActivity.USER_INFO_BEAN, userInfoBean.uin);
        intent.putExtra(MeActivity.STATE, 0);
        mContext.startActivity(intent);*/
    }

    @Override
    public void onClick(View v) {
        Intent intent = null;
        switch (v.getId()) {
            case R.id.btn_comment_release:
                posComment(mItemBean.getItemid());
                break;
            case R.id.rl_product_detail:
//                ((ProductDetailActivity) mContext).start2ProductDetail();
                break;
            case R.id.rl_shipping_current:
//                if (!AccountManager.isLogin) return;
               /* ProductShippingManage.getInstance(mContext).setCountryname(mCountryname);
                intent = new Intent(mContext, ProductShippingActivity.class);
                intent.putExtra(ProductShippingActivity.ITEM_ID, mItemBean.getItemid());
                mContext.startActivityForResult(intent, ProductShippingActivity.requestCode);*/
                break;
        }
    }

    public void setLikeCount(int count) {
        if (count > 0) {
            mTvLikerCount.setVisibility(View.VISIBLE);
            String sCount = mContext.getString(R.string.String_liker_count, count);
            mTvLikerCount.setText(sCount);
        } else {
            mTvLikerCount.setVisibility(View.GONE);
        }

    }

    private void goAlbumDetail() {
      /*  Intent intent = new Intent(mContext, AlbumDetailActivity.class);
        Bundle bundle = new Bundle();
        bundle.putSerializable(AlbumDetailActivity.ALBUM, mItemAlbum);
        intent.putExtra(AlbumDetailActivity.ALBUM, bundle);
        mContext.startActivity(intent);*/

    }


   /* private void getProductShipping() {
        final ProductShippingManage instance = ProductShippingManage.getInstance(mContext);
        CsItem.GetMatchShippingInfoRequest.Builder builder = CsItem.GetMatchShippingInfoRequest.newBuilder()
                .setMatchitemid((int) mItemBean.getItemid())
                .setCurrencycode(instance.getCurrencyCode())
                .setLocalecode(instance.getLocaleCode());
        if (AccountManager.isLogin) {
            builder.setUin(AccountManager.getInstance().mUin).setCountrycode(instance.getCountryCode()).setRegionid(instance.getRegionID());
        }

        NetEngine.postRequest(builder, new INetEngineListener<CsItem.GetMatchShippingInfoResponse>() {
            @Override
            public void onSuccess(final CsItem.GetMatchShippingInfoResponse response) {
                instance.setBannerUrl(response.getShippingimageurl());
                instance.setCountryimageurl(response.getCountryimageurl());
                mCountryname = response.getCountryname();
                instance.setCountryname(mCountryname);
                instance.setShippingInfo(response.getShippinginfo());
                instance.setShippingTitle(response.getTitle());
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mTvShippingName.setText(response.getTitle());
                        mTvShippingInfo.setText(instance.getShippingInfo());
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                LogUtils.d(errMsg);
            }
        });

    }*/

   /* public void refresh() {
        ProductShippingManage instance = ProductShippingManage.getInstance(mContext);
        mTvShippingName.setText(instance.getShippingTitle());
        mTvShippingInfo.setText(instance.getShippingInfo());
    }*/
}
