package com.fuexpress.kr.ui.activity;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseActivity;
import com.fuexpress.kr.bean.DemandDetailBean;
import com.fuexpress.kr.conf.Constants;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.fuexpress.kr.utils.ClassUtil;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.socks.library.KLog;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import fksproto.CsUser;

/**
 * Created by kevin on 2016/12/19.
 */

public class DemandsDetailActivity extends BaseActivity {

    public static final String DEMAND_BEAN = "demand_bean";
    public static final int GetItem = 1;//取货
    public static final int FindItem = 2;//找
    public static final int BuyItem = 3;//买
    public static final int ReviceItem = 4;//收货


    @BindView(R.id.title_iv_left)
    ImageView titleIvLeft;
    @BindView(R.id.title_tv_left)
    TextView titleTvLeft;
    @BindView(R.id.title_tv_center)
    TextView titleTvCenter;
    @BindView(R.id.title_tv_right)
    TextView titleTvRight;
    @BindView(R.id.title_iv_right)
    ImageView titleIvRight;
    @BindView(R.id.tv_demand_no)
    TextView tvDemandNo;
    @BindView(R.id.tv_demand_time)
    TextView tvDemandTime;
    @BindView(R.id.tv_demand_type)
    TextView tvDemandType;
    @BindView(R.id.tv_demand_state)
    TextView tvDemandState;
    @BindView(R.id.tv_demand_service_fee)
    TextView tvDemandServiceFee;
    @BindView(R.id.icon_01)
    ImageView icon01;
    @BindView(R.id.icon_02)
    ImageView icon02;
    @BindView(R.id.icon_03)
    ImageView icon03;
    @BindView(R.id.icon_04)
    ImageView icon04;
    @BindView(R.id.icon_05)
    ImageView icon05;
    @BindView(R.id.tv_item_name)
    TextView tvItemName;
    @BindView(R.id.tv_item_price)
    TextView tvItemPrice;
    @BindView(R.id.tv_item_count)
    TextView tvItemCount;
    @BindView(R.id.tv_item_notice)
    TextView tvItemNotice;
    @BindView(R.id.pick_up_balance_tv)
    TextView pickUpBalanceTv;
    @BindView(R.id.pick_up_payment_tv)
    TextView pickUpPaymentTv;
    @BindView(R.id.pick_up_payment_layout)
    LinearLayout pickUpPaymentLayout;
    @BindView(R.id.pick_up_grand_total_tv)
    TextView pickUpGrandTotalTv;
    @BindView(R.id.pick_up_submit_btn)
    Button pickUpSubmitBtn;
    @BindView(R.id.submitLayout)
    RelativeLayout submitLayout;
    @BindView(R.id.address_1)
    TextView mAddress1;
    @BindView(R.id.address_2)
    TextView mAddress2;
    @BindView(R.id.address_layout)
    LinearLayout mAddressLayout;
    @BindView(R.id.payment_iv)
    ImageView mPaymentIv;

    private int mId;
    private int mType;
    private DemandDetailBean mBean;
    private ImageView[] mImageViews;
    //用来标记当前请求的需求
    CsUser.Require mRequire;

    private final DisplayImageOptions options = new DisplayImageOptions.Builder().resetViewBeforeLoading(true).displayer(new FadeInBitmapDisplayer(100)).cacheInMemory(true
    ).cacheOnDisk(true).build();
    final ImageLoader loader = ImageLoader.getInstance();

    @Override
    public View setInitView() {
        View view = View.inflate(this, R.layout.activity_demands_detail, null);
        return view;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // TODO: add setContentView(...) invocation
        ButterKnife.bind(this);
        titleIvLeft.setVisibility(View.VISIBLE);
        titleTvLeft.setVisibility(View.VISIBLE);
        titleTvLeft.setText(getString(R.string.my_demand));
        mImageViews = new ImageView[4];
        mImageViews[0] = icon01;
        mImageViews[1] = icon02;
        mImageViews[2] = icon03;
        mImageViews[3] = icon04;
        mRequire = (CsUser.Require) getIntent().getSerializableExtra(DEMAND_BEAN);
    }

    @OnClick({R.id.title_iv_left, R.id.title_tv_left, R.id.pick_up_payment_layout, R.id.pick_up_submit_btn})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.title_iv_left:
                onBackPressed();
                break;
            case R.id.title_tv_left:
                onBackPressed();
                break;
            case R.id.pick_up_payment_layout:
                break;
            case R.id.pick_up_submit_btn:
                break;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (mRequire != null) {
            mId = 285;
            mType = mRequire.getType();
        } else {
            return;
        }
        if (mId != 0 && mType != 0 && AccountManager.getInstance().getBaseUserRequest() != null) {
            switch (mType) {
                case BuyItem:
                    mId=283;
                    getBuyInfo();
                    break;
                case GetItem:
                    getGetInfo();
                    break;
                case ReviceItem:
                    mId=269;
                    getReviceInfo();
                    break;
            }
        }
    }

    private void setData() {
        if (null != mBean) {
            tvDemandNo.setText(getString(R.string.demand_no) + mBean.salesrequireid);
            tvDemandTime.setText(getString(R.string.demand_time) + mBean.createtime);
            if(0<=mBean.requiretype&&mBean.requiretype<=4){
                tvDemandType.setText(getString(R.string.demand_type) + Constants.REQUIRETYPE[mBean.requiretype]);
            }

            tvDemandState.setText(getString(R.string.demand_state) + Constants.getStatusString(mBean.status));
            tvDemandServiceFee.setText(getString(R.string.service_fee) + mBean.servicefee);

            tvItemName.setText(getString(R.string.item_name) + "：" + mBean.description);
            tvItemPrice.setText(getString(R.string.pick_up_commodity_price) + "：" + mBean.price);
            tvItemCount.setText(getString(R.string.pick_up_commodity_count) + "：" + mBean.qty);
            tvItemNotice.setText(getString(R.string.hms_remarks_text) + "：" + mBean.remark);
            pickUpPaymentTv.setText(Constants.getPaymentString(mBean.paymentcode));

            if (mBean.imagesurl != null && mBean.imagesurl.size() > 0) {
                for (int i = 0; i < 4; i++) {
                    if (i >= mBean.imagesurl.size()) {
                        break;
                    }
                    loader.displayImage(mBean.imagesurl.get(i).getImage(), mImageViews[i], options);
                }
            }
            titleTvCenter.setText(""+ Constants.getStatusString(mBean.status));
            if(Constants.DemandStatus.STATUS_SHIPPED.equals(mBean.status)){
                //已发货就显示地址
                mAddressLayout.setVisibility(View.VISIBLE);
                mAddress1.setText(mBean.shippingname+","+mBean.shippingphone);
                mAddress2.setText(mBean.shippingaddress);
            }else {
                mAddressLayout.setVisibility(View.GONE);
            }

            if(Constants.DemandStatus.STATUS_PENDING.equals(mBean.status)){
                //如果为待付款状态则支付提交按钮可见
                submitLayout.setVisibility(View.VISIBLE);
                pickUpGrandTotalTv.setText(mBean.subtotal);
                mPaymentIv.setVisibility(View.VISIBLE);
            //    pickUpBalanceTv.setText(getString(R.string.pick_up_payment_balance, mBean.qty));
            }else {
                //隐藏显示与余额位置
                pickUpBalanceTv.setVisibility(View.GONE);
                //隐藏选择支付方式按钮
                mPaymentIv.setVisibility(View.GONE);
                submitLayout.setVisibility(View.GONE);
            }

        }
    }

    private void getBuyInfo() {
        CsUser.helpMyBuyInfoRequest.Builder builder = CsUser.helpMyBuyInfoRequest.newBuilder();
        builder.setUserHead(AccountManager.getInstance().getBaseUserRequest());
        builder.setSalesrequireid(mId);
        NetEngine.postRequest(builder, new INetEngineListener<CsUser.helpMyBuyInfoResponse>() {
            @Override
            public void onSuccess(CsUser.helpMyBuyInfoResponse response) {
                KLog.i("Demand",response.toString());
                mBean = ClassUtil.conventhelpMyBuyInfoResponse2DemandDetailBean(response);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        setData();
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                KLog.i("Demands",errMsg+" ret = "+ret);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mViewUtils.toast(myActivity().getString(R.string.get_message_failed));
                    }
                });
            }
        });
    }

    private void getGetInfo() {
        CsUser.HelpMyGetInfoRequest.Builder builder = CsUser.HelpMyGetInfoRequest.newBuilder();
        builder.setUserHead(AccountManager.getInstance().getBaseUserRequest());
        builder.setSalesrequireid(mId);
        NetEngine.postRequest(builder, new INetEngineListener<CsUser.HelpMyGetInfoResponse>() {
            @Override
            public void onSuccess(CsUser.HelpMyGetInfoResponse response) {
                KLog.i("Demand",response.toString());
                mBean = ClassUtil.conventHelpMyGetInfoResponse2DemandDetailBean(response);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        setData();
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                KLog.i("Demands",errMsg+" ret = "+ret);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mViewUtils.toast(myActivity().getString(R.string.get_message_failed));
                    }
                });
            }
        });
    }

    private void getReviceInfo() {
        CsUser.helpMyReceiveInfoRequest.Builder builder = CsUser.helpMyReceiveInfoRequest.newBuilder();
        builder.setUserHead(AccountManager.getInstance().getBaseUserRequest());
        builder.setSalesrequireid(mId);
        NetEngine.postRequest(builder, new INetEngineListener<CsUser.helpMyReceiveInfoResponse>() {
            @Override
            public void onSuccess(CsUser.helpMyReceiveInfoResponse response) {
                KLog.i("Demand",response.toString());
                mBean = ClassUtil.conventhelpMyReceiveInfoResponse2DemandDetailBean(response);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        setData();
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                KLog.i("Demands",errMsg+" ret = "+ret);
                UIUtils.postTaskSafely(new Runnable() {
                    @Override
                    public void run() {
                        mViewUtils.toast(myActivity().getString(R.string.get_message_failed));
                    }
                });
            }
        });
    }
}
