package com.fuexpress.kr.ui.activity.package_detail;

import android.app.Activity;
import android.os.Handler;
import android.support.v4.util.ArrayMap;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.TextView;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.SimpleBaseAdapter;
import com.fuexpress.kr.ui.uiutils.ImageLoaderHelper;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.nostra13.universalimageloader.core.ImageLoader;

import java.util.List;

import fksproto.CsParcel;

/**
 * Created by yuan on 2016-5-6.
 */
public class ParcelInsuranceItemsApadter extends SimpleBaseAdapter<CsParcel.ReparcelItemInfo> implements View.OnFocusChangeListener {

    private int lastFocussedPosition = -1;
    private int index = -1;
    private Handler handler = new Handler();

    private String code;
    private ArrayMap<Integer, Float> mDeclarePrices;
    private EditText currentInput;

    public ParcelInsuranceItemsApadter(Activity content, List<CsParcel.ReparcelItemInfo> data, String code) {
        super(content, data);
        mDeclarePrices = new ArrayMap<>();
        this.code = code;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        final Holder holder;
        if (convertView == null) {
            holder = new Holder();
            convertView = View.inflate(mContent, R.layout.view_item_parcel_split, null);
            holder.mTvCurrency = (TextView) convertView.findViewById(R.id.tv_currency);
            holder.mRadioButton = (RadioButton) convertView.findViewById(R.id.rb_check_state);
            holder.mIcon = (ImageView) convertView.findViewById(R.id.img_item_icon);
            ViewGroup group = (ViewGroup) convertView.findViewById(R.id.ll_des_detail);
            holder.mTitle = (TextView) group.getChildAt(0);
            holder.mPrice = (TextView) group.getChildAt(1);
            holder.mSize = (TextView) group.getChildAt(2);
            holder.mNotice = (TextView) group.getChildAt(3);
            holder.mCount = (TextView) convertView.findViewById(R.id.tv_count);
            holder.mDeclarePrice = (EditText) convertView.findViewById(R.id.ed_declare_price);
            convertView.setTag(holder);
        } else {
            holder = (Holder) convertView.getTag();
        }


        holder.mDeclarePrice.setTag(position);

        CsParcel.ReparcelItemInfo item = getItem(position);
        ImageLoader.getInstance().displayImage(item.getImagePath(), holder.mIcon, ImageLoaderHelper.getInstance(mContent).getDisplayOptions());
        holder.mTitle.setText(item.getCaptionCutPrice());
        holder.mCount.setText(mContent.getString(R.string.package_cheng) + item.getQtyPack());
        holder.mTvCurrency.setText(UIUtils.getCurrency(mContent, code));
        if (mDeclarePrices.get(position) != null) {
            String value = mContent.getString(R.string.package_double_decimals, (float) mDeclarePrices.get(position));
            holder.mDeclarePrice.setText(value);
        } else {
            holder.mDeclarePrice.setText(mContent.getString(R.string.package_double_decimals, item.getDeclaredValue()));
        }
        holder.mPrice.setText(UIUtils.getCurrency(mContent, code, item.getPrice()));
        String message = item.getMessage();

        if ("".equals(message)) {
            holder.mNotice.setVisibility(View.VISIBLE);
            holder.mNotice.setText(message);
        } else {
            holder.mNotice.setVisibility(View.GONE);
        }
        String extend = "";
        if (!"".equals(extend)) {
            holder.mSize.setVisibility(View.VISIBLE);
            holder.mSize.setText(extend);
        } else {
            holder.mSize.setVisibility(View.GONE);
        }
        convertView.setTag(R.id.rb_check_state, position);
        holder.mRadioButton.setVisibility(View.GONE);
//        holder.mDeclarePrice.addTextChangedListener(new MyTextWatch(position, holder.mDeclarePrice));
//        holder.mDeclarePrice.setOnFocusChangeListener(this);
//        fixFocus(holder.mDeclarePrice, position, convertView);
        holder.mDeclarePrice.setOnFocusChangeListener(new View.OnFocusChangeListener() {

            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            if (lastFocussedPosition == -1 || lastFocussedPosition == position) {
                                lastFocussedPosition = position;
                                holder.mDeclarePrice.requestFocus();
                                holder.mDeclarePrice.setSelection(holder.mDeclarePrice.getText().length());
                            }
                        }
                    }, 200);

                } else {
                    if (lastFocussedPosition == position) {
                        checkPrice(position, holder.mDeclarePrice);
                    }
                    lastFocussedPosition = -1;
                }
            }
        });
        return convertView;
    }

    public void hintInputMethod() {
//        if (currentInput == null) return;
//        checkPrice(index, currentInput);
    }

    private void fixFocus(EditText et, final int postion, View v) {
        et.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_UP) {
                    index = postion;
                }
                return false;
            }
        });
        et.clearFocus();
        if (index != -1 && index == postion) {
            // 如果当前的行下标和点击事件中保存的index一致，手动为EditText设置焦点。
            et.setFocusable(true);
            et.setFocusableInTouchMode(true);
            et.setClickable(true);
            et.requestFocus();
//            v.requestFocus();
//            et.requestFocus();
//            et.setKeepScreenOn(true);
            et.setSelection(et.getText().length());
        }
    }

    @Override
    public void onFocusChange(View v, boolean hasFocus) {
        if (hasFocus) {
//            index = (int) v.getTag();
//            currentInput = (EditText) v;
        } else {
            if (index == (int) v.getTag()) {
//                checkPrice(index, currentInput);
            }
        }
    }

    private void checkPrice(int postion, EditText text) {
        CsParcel.ReparcelItemInfo itemList = mData.get(postion);
        float maxValue = itemList.getQtyPack() * itemList.getPrice();
        float value;
        String strValue = text.getText().toString();
        if (!TextUtils.isEmpty(strValue)) {
            value = Float.valueOf(strValue);
            if (value > maxValue) {
                value = maxValue;
            }
        } else {
            value = 0;
        }
        String sValue = mContent.getString(R.string.package_double_decimals, value);
        text.setText(sValue);
        mDeclarePrices.put(postion, value);
//        ((InsuranceDeclarationActivity) mContent).showSelectItems();
    }


    class MyTextWatch implements TextWatcher {
        int postion;
        EditText mEditText;

        MyTextWatch(int postion, EditText editText) {
            this.postion = postion;
            this.mEditText = editText;
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            if (!mEditText.isFocused()) return;
            postion = (int) mEditText.getTag();
            if (postion > mData.size() - 1) return;
            CsParcel.ReparcelItemInfo itemList = mData.get(postion);
            float price = itemList.getPrice();
            String strValue = s.toString();
            float aFloat = 0;
            if (!TextUtils.isEmpty(strValue)) {
                aFloat = Float.valueOf(s.toString());
                if (aFloat > price * itemList.getQtyPack()) {
                    aFloat = price * itemList.getQtyPack();
                }
                if (aFloat < 1) {
                    aFloat = 1l;
                }
            } else {
                aFloat = 1;
            }
            mDeclarePrices.put(postion, aFloat);
//            ((InsuranceDeclarationActivity) mContent).showSelectItems();
            Log.d("location", "postion" + postion + "");
        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    }

    public ArrayMap getDeclarePrices() {
        return mDeclarePrices;
    }

    static class Holder {
        RadioButton mRadioButton;
        ImageView mIcon;
        TextView mTitle;
        TextView mPrice;
        TextView mSize;
        TextView mCount;
        EditText mDeclarePrice;
        public TextView mNotice;
        public TextView mTvCurrency;
    }

}
