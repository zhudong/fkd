package com.fuexpress.kr.base;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;

import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.EditText;

import com.fuexpress.kr.MainActivity;
import com.fuexpress.kr.R;
import com.fuexpress.kr.ui.activity.login_register.LoginByPhoneActivity;
import com.fuexpress.kr.ui.uiutils.ViewUtils;
import com.fuexpress.kr.utils.LogUtils;

import butterknife.ButterKnife;
import cn.pedant.SweetAlert.SweetAlertDialog;
import de.greenrobot.event.EventBus;

/**
 * Created by Longer on 2016/10/26.
 */
public abstract class BaseActivity extends FragmentActivity implements View.OnClickListener, AdapterView.OnItemClickListener {
    public ViewUtils mViewUtils = null;

    DisplayMetrics dm;
    public int mWidthPixels;
    public int mHeightPixels;
    public SweetAlertDialog mSweetAlertDialog;

    @SuppressLint("InlinedApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        //注册EventBus
        EventBus.getDefault().register(this);
        //沉浸式标题栏
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        //getSupportActionBar().hide();
        if (Integer.parseInt(android.os.Build.VERSION.SDK) > 19) {
            /*// 透明状态栏
            getWindow().addFlags(
                    WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            // 透明导航栏
            getWindow().addFlags(
                    WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);*/
            getWindow().setStatusBarColor(getResources().getColor(R.color.title_bar_black_dark));
            //view.setPadding(0, 20, 0, 0);
        }
        //
        //mSweetAlertDialog = new SweetAlertDialog(this);
        View view = setInitView();
        setContentView(view);
        //这里这一段会影响弹出的dialog型的Activity，故暂时注释掉
        //getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);

        ButterKnife.bind(this);
        mViewUtils = new ViewUtils(this);
        //获取屏幕的宽高的像素
        dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        SysApplication.mWidthPixels = dm.widthPixels;
        SysApplication.mHeightPixels = dm.heightPixels;
        //mMenuRoot = View.inflate(this, R.layout.menu_layout, null);
        //mMenuRoot.findViewById(R.id.ll_menu_2home_page).setOnClickListener(new MenuClickLintener());
        //mMenuRoot.findViewById(R.id.ll_menu__share).setOnClickListener(new MenuClickLintener());

        //PushAgent.getInstance(this).onAppStart();
        initView();
    }


    /**
     * 初始化视图(例如一系列的注册控件之类的)的方法,重写它就可以了
     */
    public void initView() {

    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);

    }


    @Override
    public void onClick(View v) {
        if (v.getId() == R.id.iv_in_title_back) {
            finish();
        }
    }


    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

    }


    /**
     * 返回当前activity(需要注意的是这里要是要返回子类的实例)
     **/
    public BaseActivity myActivity() {
        return this;
    }


    @Override
    protected void onDestroy() {
        // TODO Auto-generated method stub
        super.onDestroy();
        //ActivityController.removeActivity(this);
        EventBus.getDefault().unregister(this);
        //ButterKnife.unbind(this);
    }


    @Override
    protected void onResume() {
        super.onResume();
        //MobclickAgent.onPageStart(this.getClass().getName());
        //KLog.i("name = " + this.getClass().getName());
        //MobclickAgent.onResume(this);
    }

    @Override
    protected void onPause() {
        super.onPause();
        //MobclickAgent.onPageEnd(this.getClass().getName());
        //MobclickAgent.onPause(this);
    }

   /* public String getMachineCode() {
      *//*  final TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);
        final String tmDevice, tmSerial, tmPhone, androidId;
        tmDevice = "" + tm.getDeviceId();
        tmSerial = "" + tm.getSimSerialNumber();
        androidId = "" + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
        UUID deviceUuid = new UUID(androidId.hashCode(), ((long) tmDevice.hashCode() << 32) | tmSerial.hashCode());
        String uniqueId = deviceUuid.toString();*//*
        //LogUtils.e("这是机器码:" + uniqueId);
        //SysApplication.machineCode = uniqueId;
        //NetEngine.setUuid(uniqueId);
        return uniqueId;
    }
*/

    /**
     * @param et 隐藏软键盘
     * @nama yl
     */
    public void Hidekeyboard(EditText et) {
        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        boolean isOpen = imm.isActive();// isOpen若返回true，则表示输入法打开
        if (isOpen) {
            ((InputMethodManager) et.getContext().getSystemService(
                    INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(
                    getCurrentFocus().getWindowToken(),
                    InputMethodManager.HIDE_NOT_ALWAYS);
        }

    }

    public void showSoftInput(EditText editText) {
        editText.setFocusableInTouchMode(true);
        editText.requestFocus();
        InputMethodManager inputManager = (InputMethodManager) editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);
    }

    /**
     * @param et 显示软键盘
     * @nama yl
     */
    public void Showkeyboard(EditText et) {
        ((InputMethodManager) getSystemService(INPUT_METHOD_SERVICE))
                .showSoftInput(et, 0);

    }

    /**
     * 因为我们不知道继承这个类的Activity长什么样子,这里我们就定义为抽象方法让其进行返回来设置
     *
     * @return View
     */
    public abstract View setInitView();


    public void closeLoading() {
        if (mSweetAlertDialog != null && mSweetAlertDialog.isShowing()) {
            mSweetAlertDialog.dismiss();
        }
    }

    public void showLoading() {
        if (mSweetAlertDialog == null) {
            mSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);
        }
        mSweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#ffffff"));
        mSweetAlertDialog.setCancelable(true);
        mSweetAlertDialog.show();
    }

    protected void showLoading(int time) {
        if (mSweetAlertDialog == null) {
            mSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);
        }
        mSweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#ffffff"));
        mSweetAlertDialog.setCancelable(false);
        mSweetAlertDialog.show();
        SysApplication.getHandler().postDelayed(new Runnable() {
            @Override
            public void run() {
                mSweetAlertDialog.dismiss();
            }
        }, time);
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        closeLoading();
    }


    /**
     * 显示弹框对象
     *
     * @param type      这个type看Sw里定义的常量
     * @param titleText 需要标题的,传进来即可
     */
    public synchronized void showProgressDiaLog(int type, String titleText) {
        if (mSweetAlertDialog == null) {
            mSweetAlertDialog = new SweetAlertDialog(this, type);
        } else {
            mSweetAlertDialog.changeAlertType(type);
        }
        if (SweetAlertDialog.PROGRESS_TYPE == type) {
            mSweetAlertDialog.getProgressHelper().setBarColor(Color.parseColor("#FFFFFF"));
        }
        if (!TextUtils.isEmpty(titleText) || !(titleText == null)) {
            mSweetAlertDialog.setTitleText(titleText);
        }

        mSweetAlertDialog.setCancelable(false);
        mSweetAlertDialog.show();
    }


    public void dissMissProgressDiaLog() {
        mSweetAlertDialog.setTitleTextViewGone();
        mSweetAlertDialog.dismiss();

    }

    public void dissMissProgressDiaLog(long delay) {
        SysApplication.getHandler().postDelayed(new Runnable() {
            @Override
            public void run() {
                mSweetAlertDialog.setTitleTextViewGone();
                mSweetAlertDialog.dismiss();
            }
        }, delay);
    }

    public void dissMissProgressDiaLogAndFinish(long delay) {
        SysApplication.getHandler().postDelayed(new Runnable() {
            @Override
            public void run() {
                mSweetAlertDialog.setTitleTextViewGone();
                mSweetAlertDialog.dismiss();
                finish();
            }
        }, delay);
    }


    /**
     * 改变对话框样式的方法
     *
     * @param type      SW里定义的类型常量
     * @param titleText 需要标题的,传进来即可
     */
    public void changeDiagLogAlertType(int type, String titleText) {

        if (TextUtils.isEmpty(titleText) || !(titleText == null)) {
            mSweetAlertDialog.setTitleText(titleText);
        } else {
            //  mSweetAlertDialog.setTitleTextViewGone();
        }
        mSweetAlertDialog.changeAlertType(type);
    }

    public void onEventMainThread(BusEvent event) {
        LogUtils.d("main", this.getClass().getSimpleName());
        /*if (event.getType() == BusEvent.GO_ADD_MERCHAND_CODE) {
            if (!(this instanceof MainActivity)) {
                finish();
            }
        }*/

        if (event.getType() == BusEvent.GO_HOME_CODE) {
            if (!(this instanceof MainActivity)) {
                finish();
            }
        }
        /*if (event.getType() == BusEvent.PARCEL_APPEND) {
            if (!(this instanceof MainActivity)) {
                finish();
            }
        }*/

        /*if (event.getType() == BusEvent.GO_EDIT_MERHAND_CODE) {
            if (this instanceof ChooseClassifyChildActivity || this instanceof ChooseClassifyGroupActivity) {
                finish();
            }
        }*/
        if (event.getType() == BusEvent.LOGOUT) {
            if (!(this instanceof LoginByPhoneActivity)) {
                finish();
            }
        }

    }


    /*public String getTitleString(int temp) {
        if (ShareManager.urls == null) {
            return "null";
        }
        return getString(R.string.pictures_downing) + temp + "/" + ShareManager.urls.size();
    }*/

    public void toActivity(Class target) {
        this.startActivity(new Intent(this, target));
    }


    /**
     * 跳转Activity的方法,传入我们需要的参数即可
     */
    public <T> void startDDMActivity(Class<T> activity, boolean isAinmain) {
        Intent intent = new Intent(myActivity(), activity);
        startActivity(intent);
        //是否需要开启动画(目前只有这种x轴平移动画,后续可以添加):
        if (isAinmain) {
            this.overridePendingTransition(R.anim.activity_translate_x_in, R.anim.activity_translate_x_out);
        }
    }


    public boolean getIsShowing() {
        return mSweetAlertDialog.isShowing();
    }

}
