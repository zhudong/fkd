package com.fuexpress.kr.ui.activity;

import android.Manifest;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseActivity;
import com.fuexpress.kr.bean.PickUpItemBean;
import com.fuexpress.kr.ui.uiutils.ImageLoaderHelper;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.fuexpress.kr.ui.view.CustomListView;
import com.fuexpress.kr.ui.view.TitleBarView;
import com.fuexpress.kr.utils.LogUtils;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.zhy.m.permission.MPermissions;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Administrator on 2016-12-5.
 */

public class PickUpActivity extends BaseActivity {

    private View rootView;
    //    private View itemView;
//    private GridView pickItemGv;
//    private LinearLayout commoditysLayout;
    private MyAdapter adapter;
    private ArrayList<String> imgList;
    private LinearLayout addLayout;
    private TitleBarView titleBarView;
    private TextView backTv;
    private TextView rightTv;
    private ImageView backIv;
    private CustomListView pickListView;
    private List<PickUpItemBean> itemlist;
    private ItemAdapter itemAdapter;
    private ScrollView pickUpSv;

    @Override
    public View setInitView() {
        rootView = LayoutInflater.from(this).inflate(R.layout.activity_pick_up, null);
//        itemView = LayoutInflater.from(this).inflate(R.layout.pick_up_item, null);
        titleBarView = (TitleBarView) rootView.findViewById(R.id.pick_up_titlebar);
        backTv = titleBarView.getmTv_in_title_back_tv();
        backTv.setText(getString(R.string.main_home_tab_string));
        rightTv = titleBarView.getTv_in_title_right();
        rightTv.setText(getString(R.string.pick_up_right_delete));
        backIv = titleBarView.getIv_in_title_back();
        addLayout = (LinearLayout) rootView.findViewById(R.id.pick_up_add_layout);
        pickUpSv = (ScrollView) rootView.findViewById(R.id.pick_up_sv);
        pickListView = (CustomListView) rootView.findViewById(R.id.pick_up_listview);
        init();
//        commoditysLayout = (LinearLayout) rootView.findViewById(R.id.pick_up_commoditys_layout);
//        commoditysLayout.addView(itemView);
//        pickItemGv = (GridView) itemView.findViewById(R.id.pick_up_item_gv);
//        imgList = new ArrayList<String>();
//        adapter = new MyAdapter(this, imgList);
//        pickItemGv.setAdapter(adapter);

        backIv.setOnClickListener(this);
        backTv.setOnClickListener(this);
        addLayout.setOnClickListener(this);
        return rootView;
    }


    public void init() {
        itemlist = new ArrayList<PickUpItemBean>();
        PickUpItemBean bean = new PickUpItemBean();
        List<String> imgList = new ArrayList<String>();
        bean.setItemUrlList(imgList);
        itemlist.add(bean);
        itemAdapter = new ItemAdapter(this, itemlist);
        pickListView.setAdapter(itemAdapter);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_in_title_back:
            case R.id.tv_in_title_back_tv:
                finish();
                break;
            case R.id.pick_up_add_layout:
                PickUpItemBean bean = new PickUpItemBean();
                List<String> imgList = new ArrayList<String>();
                bean.setItemUrlList(imgList);
                itemlist.add(bean);
                itemAdapter.notifyDataSetChanged();
                setListViewHeightBasedOnChildren(pickListView);
                scrollToBottom();
                break;
        }
    }

    public void scrollToBottom(){
        new Handler().post(new Runnable() {
            @Override
            public void run() {
                pickUpSv.fullScroll(ScrollView.FOCUS_DOWN);
            }
        });
    }

    public static void setListViewHeightBasedOnChildren(ListView listView) {
        if (listView == null)
            return;
        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter == null) {
            // pre-condition
            return;
        }
        int totalHeight = 0;
        for (int i = 0; i < listAdapter.getCount(); i++) {
            View listItem = listAdapter.getView(i, null, listView);
            listItem.measure(0, 0);
            totalHeight += listItem.getMeasuredHeight();
        }
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
        listView.setLayoutParams(params);
    }

    class ItemAdapter extends BaseAdapter {

        private Context mContext;
        private List<PickUpItemBean> list;
        private List<ViewHolder> mViewHolderList;
        private float oldX;
        private float currentX;


        public ItemAdapter(Context context, List<PickUpItemBean> list) {
            this.mContext = context;
            this.list = list;
        }

        @Override
        public int getCount() {
            return list != null ? list.size() : 0;
        }

        @Override
        public Object getItem(int position) {
            return list.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (mViewHolderList == null) {
                mViewHolderList = new ArrayList<>();
            }
            final ViewHolder holder;
            if (convertView == null) {
                convertView = LayoutInflater.from(mContext).inflate(R.layout.pick_up_item, null);
                holder = new ViewHolder();
                holder.contentLayout = (LinearLayout) convertView.findViewById(R.id.pick_up_content_layout);
                holder.itemGv = (GridView) convertView.findViewById(R.id.pick_up_item_gv);
                holder.noteEt = (EditText) convertView.findViewById(R.id.pick_up_item_note_et);
                holder.addressEt = (EditText) convertView.findViewById(R.id.pick_up_item_address_et);
                holder.priceEt = (EditText) convertView.findViewById(R.id.pick_up_item_price_et);
                holder.countEt = (EditText) convertView.findViewById(R.id.pick_up_item_count_et);
                holder.deleteIv = (ImageView) convertView.findViewById(R.id.pick_up_delete_iv);
                convertView.setTag(holder);
                mViewHolderList.add(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }
            PickUpItemBean item = list.get(position);
            MyAdapter myAdapter = new MyAdapter(mContext, item.getItemUrlList());
            holder.itemGv.setAdapter(myAdapter);

            convertView.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    if(event.getAction() == MotionEvent.ACTION_DOWN){
                        oldX = event.getX();
                    }
                    if(event.getAction() == MotionEvent.ACTION_MOVE){
                        currentX = event.getX();
                        LogUtils.d("------------- " + oldX + " --- " + currentX);
                        if(currentX < oldX){
                            doDeletAnimationPlus(holder, 200);
                        }
                    }
                    return true;
                }
            });
            return convertView;
        }

        class ViewHolder {
            LinearLayout contentLayout;
            GridView itemGv;
            EditText noteEt;
            EditText addressEt;
            EditText priceEt;
            EditText countEt;
            ImageView deleteIv;
        }

        public void doDeletAnimation(){
            for (ViewHolder viewHolder : mViewHolderList) {
                doDeletAnimationPlus(viewHolder, 200);
            }
        }

        private void doDeletAnimationPlus(ViewHolder viewHolder, long time) {
            rightTv.setText(getString(R.string.pick_up_right_confrim));
            ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(viewHolder.contentLayout, View.TRANSLATION_X, 0, -50);
            objectAnimator.setDuration(time);
            objectAnimator.start();

//            ObjectAnimator rotation = ObjectAnimator.ofFloat(viewHolder.iv_in_item_delete, "rotation", 0f, 180f);
//            ObjectAnimator alpha = ObjectAnimator.ofFloat(viewHolder.iv_in_item_delete, "alpha", 0f, 1f);
            ObjectAnimator objectAnimator1 = ObjectAnimator.ofFloat(viewHolder.deleteIv, View.TRANSLATION_X, 50, 0);
            ObjectAnimator objectAnimator2 = ObjectAnimator.ofFloat(viewHolder.deleteIv, View.ALPHA, 0f, 1f);
//            ObjectAnimator objectAnimator2 = ObjectAnimator.ofFloat(viewHolder.deleteIv, View.SCALE_Y, 0, 1);
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(objectAnimator1, objectAnimator2);
            animatorSet.setDuration(time);
            viewHolder.deleteIv.setVisibility(View.VISIBLE);

//            objectAnimator1.setDuration(time);
//            objectAnimator1.start();
            animatorSet.start();
        }
    }

    class MyAdapter extends BaseAdapter {

        private Context mCtx;
        private List<String> list;
        private ImageLoader imageLoader;
        private DisplayImageOptions options;

        public MyAdapter(Context context, List<String> list) {
            this.mCtx = context;
            this.list = list;
            this.imageLoader = ImageLoader.getInstance();
            this.options = ImageLoaderHelper.getInstance(mCtx).getDisplayOptions();
        }

        @Override
        public int getCount() {
            if (list == null || list.size() == 0) {
                return 1;
            } else if (list.size() == 9) {
                return 9;
            } else {
                return list.size() + 1;
            }

        }

        @Override
        public Object getItem(int position) {
            return list.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            Holder holder;
            if (convertView == null) {
                convertView = LayoutInflater.from(mCtx).inflate(R.layout.merchandise_item, null);
                holder = new Holder();
                holder.merchandiseIv = (ImageView) convertView.findViewById(R.id.merchandise_iv);
                convertView.setTag(holder);
            } else {
                holder = (Holder) convertView.getTag();
            }
            int width = UIUtils.getScreenWidthPixels((Activity) mCtx) / 4 - 30;
            holder.merchandiseIv.setLayoutParams(new LinearLayout.LayoutParams(width, width));
            LogUtils.d("----position " + position + " size " + list.size());

            if (position == list.size() || list == null || list.size() == 0) {
                if (position == 9) {
                    convertView.setVisibility(View.GONE);
                } else {
                    holder.merchandiseIv.setScaleType(ImageView.ScaleType.CENTER);
                    holder.merchandiseIv.setVisibility(View.VISIBLE);
                    holder.merchandiseIv.setImageResource(R.mipmap.demand_addimage);
                    holder.merchandiseIv.setBackgroundResource(R.drawable.add_merchandise_shape);
                    holder.merchandiseIv.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            /*Intent intent = new Intent();
                            intent.setClass(mCtx, Down2UpDialogActivity.class);
                            intent.putExtra(Down2UpDialogActivity.GO_THIS_ACTIVITY_INTENT_KEY, Down2UpDialogActivity.ADD_MERCHANT_ITEM_TYPE);
                            startActivityForResult(intent, Constants.ALBUM_GET_BITMAP_REQUEST_CODE);*/
//                            MPermissions.requestPermissions(PickUpActivity.this, 3, Manifest.permission.WRITE_EXTERNAL_STORAGE);
                            //                            UIUtils.startImageSelectorForAddItem(1000, imgList, AddMerchandiseFragment.this, 6);
                        }
                    });
                }

            } else {
                if (position == parent.getChildCount()) {
                    holder.merchandiseIv.setVisibility(View.VISIBLE);
                    //                imageLoader.displayImage(imageList.get(position).toString(), holder.merchandiseIv, options);
                    try {
                        //                        FileInputStream fis = new FileInputStream(list.get(position));
                        //                        Bitmap bmp = BitmapFactory.decodeFile(list.get(position));


                        //                    holder.merchandiseIv.setImageBitmap(BitMapUtils.getResizedBitmap(bmp, width, width));
                        holder.merchandiseIv.setCropToPadding(true);
                        holder.merchandiseIv.setScaleType(ImageView.ScaleType.CENTER_CROP);
                        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width, width);
                        Uri uri = Uri.fromFile(new File(list.get(position)));
                        //ImageLoader.getInstance().displayImage(uri.toString(), holder.merchandiseIv, options);
                        Glide.with(PickUpActivity.this).load(uri.toString()).into(holder.merchandiseIv);
                        holder.merchandiseIv.setLayoutParams(params);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    holder.merchandiseIv.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
//                            Intent intent = new Intent();
//                            intent.setClass(mCtx, PickUpActivity.class);
//                            Bundle bundle = new Bundle();
//                            bundle.putSerializable("imgList", (Serializable) imgList);
//                            intent.putExtra("resourceType", PreviewMerchandiseActivity.RESOURCE_TYPE_ADD);
//                            bundle.putInt("position", position);
//                            intent.putExtras(bundle);
//                            startActivityForResult(intent, PreviewMerchandiseActivity.REQUEST_CODE_BACK_IMG_LIST);
                        }
                    });
                }
            }
            return convertView;
        }

        class Holder {
            ImageView merchandiseIv;
        }
    }
}
