package com.fuexpress.kr.ui.activity.my_package.content;

import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.util.ArrayMap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseActivity;
import com.fuexpress.kr.base.BusEvent;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.adapter.PackageItemsAdapter;
import com.fuexpress.kr.ui.view.RefreshListView;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.event.EventBus;
import fksproto.CsBase;
import fksproto.CsParcel;


/**
 * Created by yuan on 2016-5-4.
 */
public class PackageToSendNow extends Fragment implements RefreshListView.OnRefreshListener, View.OnClickListener {

    private RefreshListView mRefreshListView;
    private static Handler mHandler = new Handler();
    private int mPageIndex = 1;
    private List<CsParcel.Parcel> mParcelsList;
    private List<CsBase.PairIntStr> mParcelVsUrlsList;
    private boolean mHasMore = true;
    private PackageItemsAdapter mAdapter;
    private View mNoOne;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = View.inflate(getContext(), R.layout.fragment_package_items, null);
        mRefreshListView = (RefreshListView) rootView.findViewById(R.id.refresh_lv_package);
        mNoOne = rootView.findViewById(R.id.noLayout);
        rootView.findViewById(R.id.selectBtn).setOnClickListener(this);
        mRefreshListView.setOnRefreshListener(this);
//        EventBus.getDefault().register(this);
//        mRefreshListView.setOnItemClickListener(this);
        return rootView;
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        initdata();
    }

    private void initdata() {
        mParcelVsUrlsList = new ArrayList<>();
        getParcelList();
    }

    protected int getTab() {
        return CsParcel.ParcelTab.PARCEL_TAB_INSTORED_VALUE;
    }

    private void getParcelList() {
        CsParcel.GetParcelListRequest.Builder builder = CsParcel.GetParcelListRequest.newBuilder();
//        builder.setHead(AccountManager.getInstance().mBaseUserRequest);
        builder.setUserHead(AccountManager.getInstance().mBaseUserRequest);
        builder.setPageno(mPageIndex);
        if (mPageIndex == 1 && mParcelsList == null) {
            BaseActivity activity = (BaseActivity) getActivity();
            activity.showLoading();
        }
        mParcelsList = new ArrayList<>();
        builder.setTab(getTab());
        NetEngine.postRequest(builder, new INetEngineListener<CsParcel.GetParcelListResponse>() {

            @Override
            public void onSuccess(CsParcel.GetParcelListResponse response) {
                mHasMore = response.getMore();
                if (mPageIndex == 1) {
                    mParcelsList.removeAll(mParcelsList);
                    mParcelsList.addAll(response.getParcelsList());
                    mParcelsList.addAll(response.getParcelsList());
                    mParcelVsUrlsList.removeAll(mParcelVsUrlsList);
                    mParcelVsUrlsList.addAll(response.getParcelVsUrlsList());
                } else {
                    mParcelsList.addAll(response.getParcelsList());
                    mParcelVsUrlsList.addAll(response.getParcelVsUrlsList());
                }
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mRefreshListView.stopRefresh();
                        mRefreshListView.stopLoadMore(true);
                        mRefreshListView.setHasLoadMore(mHasMore);
                        if (mParcelsList.size() == 0) {
                            mNoOne.setVisibility(View.VISIBLE);
                        } else {
                            mNoOne.setVisibility(View.INVISIBLE);
                        }

                        if (mPageIndex == 1) {
                            mAdapter = new PackageItemsAdapter(getActivity(), mParcelsList, mParcelVsUrlsList);
                            mRefreshListView.setAdapter(mAdapter);

                            BaseActivity activity = (BaseActivity) getActivity();
                            activity.closeLoading();
                        } else {
                            mAdapter.notifyDataSetChanged();
                        }

                        if (mHasMore) {
                            mPageIndex++;
                        }
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        BaseActivity activity = (BaseActivity) getActivity();
                        activity.closeLoading();

                        mRefreshListView.stopRefresh();
                        mRefreshListView.stopLoadMore(true);
                        mRefreshListView.setHasLoadMore(false);
                        if (mPageIndex == 1) {
                            mParcelsList = new ArrayList<CsParcel.Parcel>();
                            mAdapter = new PackageItemsAdapter(getActivity(), mParcelsList, mParcelVsUrlsList);
                            mRefreshListView.setAdapter(mAdapter);
                        } else {
                            mAdapter.notifyDataSetChanged();
                        }
                        if (mParcelsList.size() == 0) {
                            mNoOne.setVisibility(View.VISIBLE);
                        } else {
                            mNoOne.setVisibility(View.INVISIBLE);
                        }
                    }
                });
            }
        });
    }


    @Override
    public void onRefresh(RefreshListView refreshListView) {
        mPageIndex = 1;
        getParcelList();
    }

    @Override
    public void onLoadMore(RefreshListView refreshListView) {
        if (mHasMore) {
            getParcelList();
        }
    }

    @Override
    public void onClick(View v) {
//        EventBus.getDefault().post(new BusEvent(BusEvent.GO_HOME_PAGE, null));
    }


    @Override
    public void onDestroy() {
        super.onDestroy();
//        EventBus.getDefault().unregister(this);
    }


    public android.support.v4.util.ArrayMap getItem(long id) {
        ArrayMap map = new ArrayMap();
        for (int i = 0; i < mParcelsList.size(); i++) {
            CsParcel.Parcel parcel = mParcelsList.get(i);
            long parcelId = parcel.getParcelId();
            if (id == parcelId) {
                CsBase.PairIntStr pairIntStr = mParcelVsUrlsList.get(i);
                map.put(parcel, pairIntStr);
                mParcelsList.remove(i);
                mParcelVsUrlsList.remove(i);
                mAdapter.notifyDataSetChanged();
                return map;
            }
        }
        return null;
    }

    public void addData(CsParcel.Parcel pacel, CsBase.PairIntStr pairIntStr) {
        mParcelsList.add(pacel);


    }

    public void putData(CsParcel.Parcel pacel, CsBase.PairIntStr pairIntStr) {
        ArrayList<CsParcel.Parcel> list = new ArrayList<>();
        list.addAll(mParcelsList);
        mParcelsList.removeAll(mParcelsList);
        mParcelsList.add(pacel);
        mParcelsList.addAll(list);
        list = null;

        ArrayList<CsBase.PairIntStr> list2 = new ArrayList<>();
        list2.addAll(mParcelVsUrlsList);
        mParcelVsUrlsList.retainAll(mParcelVsUrlsList);
        mParcelVsUrlsList.add(pairIntStr);
        mParcelVsUrlsList.addAll(list2);
        mAdapter.notifyDataSetChanged();
    }

    public static boolean mNeedRefresh;

    @Override
    public void onResume() {
        super.onResume();
        if (mNeedRefresh && mParcelsList != null) {
            mRefreshListView.setSelection(0);
            mRefreshListView.autoRefresh();
        }
        mNeedRefresh = false;
    }

    public void reloade() {
        mPageIndex = 1;
        getParcelList();
    }
}