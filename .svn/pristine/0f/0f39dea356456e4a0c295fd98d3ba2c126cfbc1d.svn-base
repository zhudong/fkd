package com.fuexpress.kr.ui.activity.crowd;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.Handler;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.style.ForegroundColorSpan;
import android.text.style.StrikethroughSpan;
import android.text.style.StyleSpan;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;


import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseActivity;
import com.fuexpress.kr.bean.CommoditysBean;
import com.fuexpress.kr.conf.Constants;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.model.ItemBean;
import com.fuexpress.kr.model.ShareManager;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.activity.ItemDetailActivity;
import com.fuexpress.kr.ui.activity.ShareActivity;
import com.fuexpress.kr.ui.activity.product_detail.ProductDetailHead;
import com.fuexpress.kr.ui.activity.shopping_cart.CartOrderActivity;
import com.fuexpress.kr.ui.activity.shopping_cart.PaymentSuccessActivity;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.fuexpress.kr.ui.view.CrowdProgressDetail;
import com.fuexpress.kr.ui.view.CrowdTimer;
import com.fuexpress.kr.ui.view.FlowLayout;
import com.fuexpress.kr.ui.view.MyNumberCounter;
import com.fuexpress.kr.ui.view.OrderMessageView;
import com.fuexpress.kr.ui.view.ProductExtendView;
import com.fuexpress.kr.ui.view.TitleBarView;
import com.fuexpress.kr.utils.ClassUtil;
import com.fuexpress.kr.utils.CommonUtils;

import java.util.ArrayList;
import java.util.List;

import fksproto.CsBase;
import fksproto.CsCart;
import fksproto.CsCrowd;
import fksproto.CsItem;

public class AttendCrowdActivity extends BaseActivity {
    public static List<CommoditysBean> cartItems;

    public static String ITEM_BEAN = "item_bean";
    public static String CROWD_ID = "crowd_id";
    private ItemBean mItem;
    private View mRootView;
    private ProductDetailHead mHeadView;
    private TextView mTvName;
    private TextView mTvPrice;
    private CrowdTimer mCrowdTimer;
    private CrowdProgressDetail mProgressDetail;
    private TextView mTvRate;
    private TextView mTvBuyer;
    private TextView mTvMessageDelivery;
    private TextView mTvItemDetail;
    private ArrayList<CsBase.ItemExtendOption> mOptions;
    private CsBase.Seller mSeller;
    private CsBase.ItemProduct mItemProduct;

    private static Handler mHandler = new Handler();
    private List<CsBase.ItemImage> mItemImagesList;
    private CsCrowd.Crowd mCrowd;
    private CsBase.Seller mSeller1;
    private CsBase.Warehouse mWarehouse;
    private int mMargin;
    private int mCurrentSize = 0;
    private OrderMessageView mOrderMessage;
    private long mCrowdId;
    private View mBack;
    private View mRight;
    private CsBase.ItemOffer mItemOffer;
    private TextView mTvServiceCharge;
    private List<CsBase.ItemOfferGroup> mItemOfferGroupsList;
    private TextView mBtnCrowNow;
    private MyNumberCounter mNumberCounter;
    private ArrayList<CsBase.ItemExtendAttr> mItemExtendAttrs;
    private List<CsBase.ItemExtend> mItemExtendsList;
    private float mCharge;
    private CsBase.ItemLink mItemLink;
    private CsBase.ItemPlace mItemPlace;
    private CsBase.ItemExtend mColorItemExtend;
    private int mCurrentColor;
    private int anInt;
    private LinearLayout mLlExtendsContainer;

    @Override
    public View setInitView() {
        mRootView = View.inflate(this, R.layout.activity_attend_crowd, null);
        return mRootView;
    }

    @Override
    public void initView() {

        mHeadView = new ProductDetailHead(this);
        FrameLayout headContainer = (FrameLayout) mRootView.findViewById(R.id.fl_attend_crowd_head);
        headContainer.addView(mHeadView.getRootView());
        mTvName = (TextView) mRootView.findViewById(R.id.tv_crowd_item_name);
        mTvPrice = (TextView) mRootView.findViewById(R.id.tv_crowd_item_price);
        mCrowdTimer = (CrowdTimer) mRootView.findViewById(R.id.crowd_timer);
        mProgressDetail = (CrowdProgressDetail) mRootView.findViewById(R.id.crowd_progress_detail);
        mTvRate = (TextView) mRootView.findViewById(R.id.tv_rate);
        mTvServiceCharge = (TextView) mRootView.findViewById(R.id.tv_service_charge);
        mTvBuyer = (TextView) mRootView.findViewById(R.id.tv_buyer);
        mOrderMessage = (OrderMessageView) mRootView.findViewById(R.id.ov_order_message);
        mTvMessageDelivery = (TextView) mRootView.findViewById(R.id.tv_delivery_message);
        mTvItemDetail = (TextView) mRootView.findViewById(R.id.tv_item_detail);
        mLlExtendsContainer = (LinearLayout) mRootView.findViewById(R.id.ll_extends);
//        mTvSize = (TextView) mRootView.findViewById(R.id.tv_size);
//        mTvColor = (TextView) mRootView.findViewById(R.id.tv_color);
//        mFlSizeContainer = (FlowLayout) mRootView.findViewById(R.id.fl_size_container);
//        mFlColorContainer = (FlowLayout) mRootView.findViewById(R.id.fl_color_container);
        mBtnCrowNow = (TextView) mRootView.findViewById(R.id.btn_crowd_now);
        mNumberCounter = (MyNumberCounter) mRootView.findViewById(R.id.numbercounter_attend_crowd);

        initTitle();
        initEvent();
        initData();
    }

    private void initEvent() {
        mTvItemDetail.setOnClickListener(this);
        mBtnCrowNow.setOnClickListener(this);

        mBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        mRight.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switchMenu();
            }
        });

    }


    private void initData() {
        mItem = (ItemBean) getIntent().getBundleExtra(ITEM_BEAN).getSerializable(ITEM_BEAN);
        mCrowdId = getIntent().getLongExtra(CROWD_ID, 0);
        if (mCrowdId > 0) {
            getCrowdDetail(mCrowdId);
        } else {
            mCrowdId = mItem.getCrowdId();
        }
        if (mItemImagesList != null) {
            mHeadView.initData(mItemImagesList);
            mProgressDetail.setData(mCrowd);
        } else {
            getItemBase();
            getItemCrowdDeatail();
//            getItemPurchaseDetail();
        }

        mMargin = UIUtils.dip2px(8);

    }

    private void initFromItem() {
        String title = mItem.getTitle();
//        SpannableString msp1 = new SpannableString(title);
//        msp1.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), 0, title.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        mTvName.setText(title);
        mTvPrice.setText(UIUtils.getCurrency(AttendCrowdActivity.this, mItem.getDefaultPrice() * mItem.getExchangeRate()));
        String sRate = getResources().getString(R.string.String_exchange_rate);
      /*  String priceRate = sRate +
                getResources().getString(R.string.String_exchange_to_wom, AccountManager.getInstance().getCurrencyCode(), 1 / mItem.getExchangeRate(), mItem.getCurrency_code()) + "    " +

                getResources().getString(R.string.String_exchange_to_rmb, mItem.getCurrency_code(), mItem.getExchangeRate(), AccountManager.getInstance().getCurrencyCode());*/


        String userCurrency = AccountManager.getInstance().getCurrencyCode();
        String itemCurrency = mItem.getCurrency_code();
        String priceRate = sRate + UIUtils.getCurrency(this, userCurrency, 1f, 1, 0) + " = " + UIUtils.getCurrency(this, itemCurrency, 1 / mItem.getExchangeRate(), 1, -1) + "  " +
                UIUtils.getCurrency(this, itemCurrency, 1f, 1, 0) + " = " + UIUtils.getCurrency(this, userCurrency, mItem.getExchangeRate(), 1, -1);
     /*   UIUtils.getCurrency(this, userCurrency, 1 / mItem.getExchangeRate(), 0)+" = "+
                UIUtils.getCurrency(this, mItem.getCurrency_code(), mItem.getExchangeRate(), 0, 0);
*/
        SpannableString msp = new SpannableString(priceRate);
        msp.setSpan(new ForegroundColorSpan(Color.BLACK), 0, sRate.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        msp.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), 0, sRate.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        mTvRate.setText(msp);
        if (mItem.getCurrency_code().equals(AccountManager.getInstance().getCurrencyCode())) {
            mTvRate.setVisibility(View.GONE);
        }
    }

    private void initFromCrowd(CsCrowd.Crowd crowd) {
        mProgressDetail.setData(crowd);

    }

    private void getCrowdDetail(long id) {
        CsCrowd.GetCrowdDetailRequest.Builder builder = CsCrowd.GetCrowdDetailRequest.newBuilder();
        AccountManager instance = AccountManager.getInstance();
        builder.setCrowdId(id).setCurrencycode(instance.getCurrencyCode()).setCurrencyid(instance.getCurrencyId()).setLocalecode(instance.getLocaleCode());
        NetEngine.postRequest(builder, new INetEngineListener<CsCrowd.GetCrowdDetailResponse>() {

            @Override
            public void onSuccess(CsCrowd.GetCrowdDetailResponse response) {
                final CsCrowd.Crowd crowd = response.getCrowd();
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mProgressDetail.setData(crowd, mItem);
                        mCrowdTimer.initTime(crowd);
                        setCrowdButton(crowd);
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {

            }
        });

    }

    private void setCrowdButton(CsCrowd.Crowd crowd) {
        if (crowd.getState() == CsCrowd.CrowdState.CROWD_STATE_FAILED_VALUE || crowd.getState() == CsCrowd.CrowdState.CROWD_STATE_PENDING_VALUE) {
            mBtnCrowNow.setEnabled(false);
        } else {
            mBtnCrowNow.setEnabled(true);
        }
    }


    private void getItemCrowdDeatail() {
        CsCrowd.GetItemCrowdDetailRequest.Builder builder = CsCrowd.GetItemCrowdDetailRequest.newBuilder();
        AccountManager instance = AccountManager.getInstance();
        builder.setItemId(mItem.getItemid())
//        builder.setItemId(1940703)
                .setUserinfo(instance.getBaseUserRequest())
                .setCurrencyCode(instance.getCurrencyCode())
                .setCurrencyID(instance.getCurrencyId())
                .setLocaleCode(instance.getLocaleCode());
        NetEngine.postRequest(builder, new INetEngineListener<CsCrowd.GetItemCrowdDetailResponse>() {
            @Override
            public void onSuccess(CsCrowd.GetItemCrowdDetailResponse response) {
                mCrowd = response.getCrowd();
                mSeller = response.getSeller();
                mWarehouse = response.getWarehouse();
                List<CsBase.ItemExtend> itemExtendsList = response.getItemExtendsList();
                mItemOffer = response.getItemOffer();
                mItemOfferGroupsList = response.getItemOfferGroupsList();
                mItemProduct = response.getItemProduct();

                mItemExtendsList = response.getItemExtendsList();
/*
                if (response.getItemExtendsCount() > 0) {
                    mOptions = new ArrayList<CsBase.ItemExtendOption>();
                    mItemExtendAttrs = new ArrayList<>();
                    CsBase.ItemExtend itemExtend = response.getItemExtends(0);
                    List<CsBase.ItemExtendOption> optionsList = itemExtend.getOptionsList();
                    for (CsBase.ItemExtendOption option : optionsList) {
                        if (option.getOptionName() != "") {
                            mOptions.add(option);
                            mItemExtendAttrs.add(itemExtend.getAttr());
                        }
                    }
                    if (response.getItemExtendsCount() == 2) {
                        mColorItemExtend = response.getItemExtends(1);
                    }
                }*/

                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mProgressDetail.setData(mCrowd, mItem);
                        mCrowdTimer.initTime(mCrowd);
                        showSeller();
//                        showSizeOption();
//                        showColorOption();
                        if (mItemExtendsList != null && mItemExtendsList.size() > 0) {
                            mLlExtendsContainer.removeAllViews();
                            for (CsBase.ItemExtend extend : mItemExtendsList) {
                                ProductExtendView extendView = new ProductExtendView(AttendCrowdActivity.this);
                                extendView.showOption(extend);
                                mLlExtendsContainer.addView(extendView);
                            }
                        }


                        showHouse();
                        initnNumCount();
                        setCrowdButton(mCrowd);
                        initCount(mItemProduct);
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {

            }
        });
    }


    private void initCount(CsBase.ItemProduct itemProduct) {
        if (itemProduct != null) {
//            int max = itemProduct.getMaxQty()<itemProduct.getItemStock()?itemProduct.getMaxQty():itemProduct.getItemStock();
            int min = itemProduct.getMinQty();
            mNumberCounter.init(min, itemProduct.getMaxQty());
            if (mItemOffer.getQty() >= mItemProduct.getMinQty() && mItemOffer.getQty() < mItemProduct.getMaxQty())
                mNumberCounter.init(mItemProduct.getMinQty(), (int) mItemOffer.getQty());
            if (mItemOffer.getQty() < mItemProduct.getMinQty()) {
//                库存不足
                mBtnCrowNow.setEnabled(false);
                mNumberCounter.init((int) mItemOffer.getQty(), (int) mItemOffer.getQty());
            }
        }
    }

    private void initnNumCount() {
        if (mItemProduct != null) {

        }
    }

    private void showHouse() {
//        mTvMessageDelivery.setText(mWarehouse.getName());
        String sDelive = getResources().getString(R.string.String_delivery_method);
        String name = mWarehouse.getName();
        String hosedes = "";
        sDelive += "\n";
        if (AccountManager.getInstance().getLocaleCode().contains("en")) {
            sDelive += "Shipped out from";
            hosedes = sDelive + name + "\n";
        } else {
            hosedes = sDelive + name + " " + getString(R.string.String_Direct_Mail) + "\n";
        }
        hosedes = hosedes + mWarehouse.getDesc().replace("<p>", "");
        hosedes = hosedes.replace("</p>", "\n");
        SpannableString msp = new SpannableString(hosedes);
        msp.setSpan(new ForegroundColorSpan(Color.BLACK), 0, sDelive.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        msp.setSpan(new StyleSpan(Typeface.BOLD), 0, sDelive.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        msp.setSpan(new StyleSpan(Typeface.BOLD), hosedes.indexOf(name), hosedes.indexOf(name) + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

        mTvMessageDelivery.setText(msp);
    }

    private void showSeller() {
        if (mItemOffer != null && mItemOffer.getOfferType() == 2) {
            mTvServiceCharge.setVisibility(View.VISIBLE);
            mCharge = mProgressDetail.getEndPrice() * (mItemOfferGroupsList.size() > 0 ? mItemOfferGroupsList.get(0).getRate() : mItemOffer.getRate());
            String serviceTitle = getResources().getString(R.string.String_service_charge);
            String sServiceCharge = serviceTitle + UIUtils.getCurrency(this, mCharge);
            SpannableString msp = new SpannableString(sServiceCharge);
            msp.setSpan(new StyleSpan(Typeface.BOLD), 0, serviceTitle.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            mTvServiceCharge.setText(msp);
            String nickname = mSeller.getNickname();
            anInt = (int) (mItemOffer.getRate() * 100);
            String sellerDes = String.format(this.getResources().getString(R.string.String_service_seller), nickname, anInt);
            SpannableString sSSeller = new SpannableString(sellerDes);
            sSSeller.setSpan(new StyleSpan(Typeface.BOLD), sellerDes.indexOf(nickname), sellerDes.indexOf(nickname) + nickname.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            mTvBuyer.setText(sSSeller);
            if (mItemOfferGroupsList.size() > 0) {
              /*  if (3 == memberGroup) {
                    mTv_in_user_info_member_group.setText("超级会员");
                } else if (2 == memberGroup) {
                    mTv_in_user_info_member_group.setText("VIP会员");
                } else {
                    mTv_in_user_info_member_group.setText("普通会员");
                }
                */
                int memberGroup = 0;
                String sMenberGroup = null;
                if (AccountManager.getInstance().userInfo != null) {
                    memberGroup = AccountManager.getInstance().userInfo.getMemberGroup();
                }
                if (3 == memberGroup) {
                    sMenberGroup = getString(R.string.String_super_member);
                } else if (2 == memberGroup) {
                    sMenberGroup = getString(R.string.String_vip_member);
                } else {
                    sMenberGroup = getString(R.string.String_norme_member);
                }
                CsBase.ItemOfferGroup group = mItemOfferGroupsList.get(0);
                float rate = group.getRate();
                String vipSeller = String.format(this.getResources().getString(R.string.String_vip_rate), sMenberGroup, group.getQty(), CommonUtils.formatFloat(this, rate * 100));
                String s = sSSeller + "\n" + vipSeller;
                SpannableString spannableString = new SpannableString(s);
                spannableString.setSpan(new StyleSpan(Typeface.BOLD), s.indexOf(nickname), s.indexOf(nickname) + nickname.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                spannableString.setSpan(new StyleSpan(Typeface.BOLD), sellerDes.indexOf(anInt + ""), sellerDes.indexOf(anInt + "") + (anInt + "").length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

                String rate2 = (int) (mItemOffer.getRate() * 100) + "%";
                spannableString.setSpan(new StrikethroughSpan(), s.indexOf(rate2), s.indexOf(rate2) + rate2.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                mTvBuyer.setText(spannableString);
            }
        } else {
            String nickname = mSeller.getNickname();
            String sellerDes = String.format(this.getResources().getString(R.string.String_service_seller2), nickname);
            SpannableString sSSeller = new SpannableString(sellerDes);
            sSSeller.setSpan(new StyleSpan(Typeface.BOLD), sellerDes.indexOf(nickname), sellerDes.indexOf(nickname) + nickname.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            mTvBuyer.setText(sSSeller);
        }
    }

    private void getItemDetail() {

    }


    public void getItemBase() {
        CsItem.GetItemBasicDetailRequest.Builder builder = CsItem.GetItemBasicDetailRequest.newBuilder();
        AccountManager instance = AccountManager.getInstance();
        builder.setItemId(mItem.getItemid())
                .setCurrencycode(instance.getCurrencyCode())
                .setCurrencyid(instance.getCurrencyId())
                .setLocalecode(instance.getLocaleCode());
        NetEngine.postRequest(builder, new INetEngineListener<CsItem.GetItemBasicDetailResponse>() {

            @Override
            public void onSuccess(final CsItem.GetItemBasicDetailResponse response) {
                mItemLink = response.getItemLink();
                mItemPlace = response.getItemPlace();
                mItemImagesList = response.getItemImagesList();
                response.getItem();
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mItem = ClassUtil.convertItem2ItemBean(response.getItem());
                        mHeadView.initData(mItemImagesList);
                        mHeadView.setImageSize(mItem.getImageRatio());
                        ClassUtil.convertItem2ItemBean(mItem, response.getItem());
                        initFromItem();
                    }
                });

               /* mHandler.sendEmptyMessage(SHOW_BASE);
                getMerchantByLinkID();*/
            }

            @Override
            public void onFailure(int ret, String errMsg) {
//                Log.d(TAG, errMsg);
            }
        });
    }

    @Override
    public void onClick(View v) {
        super.onClick(v);
        switch (v.getId()) {
            case R.id.btn_crowd_now:
//                addCart();
                Intent intent = new Intent(this, PaymentSuccessActivity.class);
                startActivity(intent);
                break;
            case R.id.tv_item_detail:
                goItemDetail();
                break;
        }
    }

    private void goItemDetail() {
        Intent intent = new Intent(this, ItemDetailActivity.class);
        String url = Constants.WebWiewUrl.getUrl(Constants.WebWiewUrl.CROWD_PRODUCT_DETAIL) + mItem.getCrowdProductId() + "?decorator=empty" + "&localeCode=" + AccountManager.getInstance().getLocaleCode();
        intent.putExtra(ItemDetailActivity.URL, url);
        startActivity(intent);
    }


    private void switchCurentOption(FlowLayout root, int index) {
        for (int i = 0; i < root.getChildCount(); i++) {
            TextView button = (TextView) root.getChildAt(i);
            if (index == i) {
                button.setBackground(getResources().getDrawable(R.drawable.shape_for_price_selected));
                button.setTextColor(Color.RED);
            } else {
                button.setBackground(getResources().getDrawable(R.drawable.shape_for_price_normal));
                button.setTextColor(getResources().getColor(R.color.text_gray));
            }
        }
    }

    private void initTitle() {
        mBack = mRootView.findViewById(R.id.title_iv_left);
        mRight = mRootView.findViewById(R.id.title_iv_right);
        mRight.setVisibility(View.VISIBLE);
        ((TextView) mRootView.findViewById(R.id.title_tv_center)).setText(getResources().getString(R.string.String_attend_crowd_title));
    }

    @Override
    protected View getAnchorView() {
        return mRight;
    }


    private void addCart() {
        CrowdOrderInfo crowdOrderInfo = new CrowdOrderInfo();
        int number = mNumberCounter.getCurrentNumber();
        String where = null;
        if (mItemPlace != null && mItemPlace.getPlaceId() != 0) {
            where = mItemPlace.getPlaceName();
        } else {
            if (mItemLink != null)
                where = mItemLink.getWebsiteName();
        }
        float price = (float) Math.round((mProgressDetail.getEndPrice() + mCharge) * 100) / 100;
        crowdOrderInfo.setCurrencyPrice(price);
        CsCart.SalesCartItem.Builder builder = CsCart.SalesCartItem.newBuilder()
                .setNote(mOrderMessage.getMessage())
                .setTitle(mItem.getTitle())
                .setBuyfrom(where)
                .setItemId(mItem.getItemid())
                .setWarehouseId(mWarehouse.getWarehouseId())
                .setCannotBuyit(mItem.cannot_buyit)
                .setSeller(mSeller.getNickname())
                .setImageUrl(mItem.getImageUrl())
                .setIsSelected(true)
                .setCartItemId((12334))
                .setSubtitle(mItem.getTitle())
                .setQty(mNumberCounter.getCurrentNumber())
                .setUnitPrice(price);

        for (int i = 0; i < mLlExtendsContainer.getChildCount(); i++) {
            ProductExtendView child = (ProductExtendView) mLlExtendsContainer.getChildAt(i);
            CsBase.ItemExtend extend = child.getExtendValue();
            if (extend != null) builder.addExtends(extend);
        }
        CsCart.SalesCartItem salesCartItem = builder.build();
        crowdOrderInfo.setSalesCartItem(salesCartItem);
        mItem.setCrowd_id(mCrowd.getCrowdId());
        crowdOrderInfo.setItemBean(mItem);
        List<CsBase.PairIntInt> selectedAttrs = crowdOrderInfo.getSelectedAttrs();
        selectedAttrs.clear();
        for (int i = 0; i < mLlExtendsContainer.getChildCount(); i++) {
            ProductExtendView child = (ProductExtendView) mLlExtendsContainer.getChildAt(i);
            selectedAttrs.add(child.getCurrentOptionValue());
        }
        crowdOrderInfo.setWarehouse(mWarehouse);
        crowdOrderInfo.setCount(number);
        Intent intent = new Intent(this, CrowdCartOrderActivity.class);
        Bundle bundle = new Bundle();
        bundle.putSerializable(CrowdCartOrderActivity.Crowd_order_info, crowdOrderInfo);
        intent.putExtras(bundle);
        startActivity(intent);
    }

/*
    private void addCart() {
        int number = mNumberCounter.getCurrentNumber();
        String where = null;
        if (mItemPlace != null && mItemPlace.getPlaceId() != 0) {
            where = mItemPlace.getPlaceName();
        } else {
            if (mItemLink != null)
                where = mItemLink.getWebsiteName();
        }
        float price = (float) Math.round((mProgressDetail.getEndPrice() + mCharge) * 100) / 100;

        CsCart.SalesCartItem.Builder builder = CsCart.SalesCartItem.newBuilder()
                .setNote(mOrderMessage.getMessage())
                .setTitle(mItem.getTitle())
                .setBuyfrom(where)
                .setItemId(mItem.getItemid())
                .setWarehouseId(mWarehouse.getWarehouseId())
                .setCannotBuyit(mItem.cannot_buyit)
                .setSeller(mSeller.getNickname())
                .setImageUrl(mItem.getImageUrl())
                .setIsSelected(true)
                .setCartItemId((12334))
                .setSubtitle(mItem.getTitle())
                .setQty(mNumberCounter.getCurrentNumber())
                .setUnitPrice(price);

        for (int i = 0; i < mLlExtendsContainer.getChildCount(); i++) {
            ProductExtendView child = (ProductExtendView) mLlExtendsContainer.getChildAt(i);
            CsBase.ItemExtend extend = child.getExtendValue();
            if (extend != null) builder.addExtends(extend);
        }
        CsCart.SalesCartItem salesCartItem = builder.build();


        ArrayList<CommoditysBean> cartCommodityBeans = new ArrayList<>();
        CommoditysBean commoditysBean = new CommoditysBean();
        ArrayList<CsCart.SalesCartItem> salesCartItems = new ArrayList<>();
        salesCartItems.add(salesCartItem);
        commoditysBean.setSalesCartItems(salesCartItems);
        commoditysBean.crowdId = mCrowd.getCrowdId();

        commoditysBean.getExtendAttrs().clear();
        for (int i = 0; i < mLlExtendsContainer.getChildCount(); i++) {
            ProductExtendView child = (ProductExtendView) mLlExtendsContainer.getChildAt(i);
            commoditysBean.getExtendAttrs().add(child.getCurrentOptionValue());
        }

        CommoditysBean commoditysBean2 = new CommoditysBean();
        List<CsBase.Warehouse> warehouses = new ArrayList<>();
        warehouses.add(mWarehouse);
        commoditysBean2.setWarehouses(warehouses);
        commoditysBean2.setCrowdId(mItem.getCrowdId());
        commoditysBean2.setItemId(mItem.getItemid());
        commoditysBean2.setQty(number);

        cartCommodityBeans.add(commoditysBean2);
        cartCommodityBeans.add(commoditysBean);

        Intent intent = new Intent(this, CrowdCartOrderActivity.class);
        Bundle bundle = new Bundle();
        cartItems = cartCommodityBeans;
        intent.putExtra("grandTotal", price * mNumberCounter.getCurrentNumber());
        intent.putExtra("qtyCount", mNumberCounter.getCurrentNumber());
        intent.putExtras(bundle);
        startActivity(intent);
    }
*/

    @Override
    protected void share() {
      /*  ArrayList<String> urls = new ArrayList<>();
        for (CsBase.ItemImage itemImage : mItemImagesList) {
            urls.add(itemImage.getImageUrl() + Constants.ImgUrlSuffix.mob_list);
        }
        String url = ShareUtil.getShareCrowdAttend().replace("1%", mCrowd.getCrowdId() + "") + Constants.WebWiewUrl.SHARE_URL_SUFFIX + AccountManager.getInstance().mInviteKey;
        ShareBean bean = new ShareBean(1, mCrowd.getTitle(), mItem.getImageUrl(), url, urls, null, ShareActivity.CategoryShare.CROWD);
        shareDetail(0, bean);*/
        ArrayList<CsBase.ItemImage> urls = new ArrayList<>();
        urls.add(CsBase.ItemImage.newBuilder().setImageUrl(mItem.getImageUrl()).build());
        ShareManager.initWithRes(urls, mCrowd.getName(), this);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ScrollView mScItemContent = (ScrollView) ((ViewGroup) mRootView).getChildAt(1);
        mScItemContent.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);
        mScItemContent.setFocusable(true);
        mScItemContent.setFocusableInTouchMode(true);
        mScItemContent.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                v.requestFocusFromTouch();
                return false;
            }
        });
    }
}
