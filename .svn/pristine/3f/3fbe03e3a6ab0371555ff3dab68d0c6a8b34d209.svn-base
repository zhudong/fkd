package com.fuexpress.kr.ui.activity.crowd;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckedTextView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BaseActivity;
import com.fuexpress.kr.conf.Constants;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.model.ItemBean;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.activity.AddressManagerActivity;
import com.fuexpress.kr.ui.activity.ContractServiceActivity;
import com.fuexpress.kr.ui.adapter.OrderCommodityAdapter;
import com.fuexpress.kr.ui.uiutils.UIUtils;
import com.fuexpress.kr.ui.view.CustomDialog;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import fksproto.CsAddress;
import fksproto.CsCart;
import fksproto.CsOrder;
import fksproto.CsShipping;


/**
 * Created by Administrator on 2016/4/18.
 */
public class CrowdDeliveryActivity extends BaseActivity {

    @BindView(R.id.title_tv_center)
    TextView mTitleTvCenter;
    @BindView(R.id.merge_order_title)
    TextView mMergeOrderTitle;
    @BindView(R.id.delivery_merge_order_help_iv)
    ImageView mDeliveryMergeOrderHelpIv;
    @BindView(R.id.delivery_merge_order_iv)
    ImageView mDeliveryMergeOrderIv;
    @BindView(R.id.delivery_merge_order_layout)
    RelativeLayout mDeliveryMergeOrderLayout;
    @BindView(R.id.direct_mail_title)
    TextView mDirectMailTitle;
    @BindView(R.id.delivery_direct_mail_help_iv)
    ImageView mDeliveryDirectMailHelpIv;
    @BindView(R.id.delivery_direct_mail_iv)
    ImageView mDeliveryDirectMailIv;
    @BindView(R.id.delivery_direct_mail_layout)
    RelativeLayout mDeliveryDirectMailLayout;
    @BindView(R.id.address_pin_iv)
    ImageView mAddressPinIv;
    @BindView(R.id.delivery_name_and_phone_tv)
    TextView mDeliveryNameAndPhoneTv;
    @BindView(R.id.delivery_default_address_iv)
    TextView mDeliveryDefaultAddressIv;
    @BindView(R.id.delivery_phone_tv)
    TextView mDeliveryPhoneTv;
    @BindView(R.id.delivery_address_layout)
    RelativeLayout mDeliveryAddressLayout;
    @BindView(R.id.delivery_commodity_layout)
    LinearLayout mDeliveryCommodityLayout;
    @BindView(R.id.delivery_confirm_btn)
    Button mDeliveryConfirmBtn;
    @BindView(R.id.tv_ware_house_name)
    TextView mTvWareHouseName;
    @BindView(R.id.img_arrow)
    ImageView mImgArrow;
    @BindView(R.id.ll_item_container)
    LinearLayout mLlItemContainer;

    private int mOrderShippingScheme;
    private CrowdOrderInfo mOrderInfo = CrowdCartOrderActivity.mOrderInfo;

    @Override
    public View setInitView() {
        return View.inflate(this, R.layout.activity_crowd_delivery, null);
    }

    @Override
    public void initView() {
        if (CrowdCartOrderActivity.mAddress != null) {
            setAddress(CrowdCartOrderActivity.mAddress);
        }
        showOrderScheme();
        showOrderItem();
    }

    private void showOrderItem() {
        mTvWareHouseName.setText(mOrderInfo.getWarehouse().getName());
        ArrayList<CsCart.SalesCartItem> list = new ArrayList<>();
        list.add(mOrderInfo.getSalesCartItem());
        OrderCommodityAdapter adapter = new OrderCommodityAdapter(this, list);
        for (int i = 0; i < list.size(); i++) {
            View view = adapter.getView(i, null, null);
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, UIUtils.dip2px(1), 0, 0);
            mLlItemContainer.addView(view, layoutParams);
        }
        mImgArrow.setImageResource(R.mipmap.arrow_up);
    }

    private void showOrderScheme() {
        switch (mOrderShippingScheme) {
            case CsOrder.ShippingScheme.SHIPPING_SCHEME_DIRECT_VALUE:
                mDeliveryDirectMailIv.setImageResource(R.mipmap.cart_select);
                mDeliveryMergeOrderIv.setImageResource(R.mipmap.cart_unselect);
                break;
            case CsOrder.ShippingScheme.SHIPPING_SCHEME_MERGE_VALUE:
                mDeliveryDirectMailIv.setImageResource(R.mipmap.cart_unselect);
                mDeliveryMergeOrderIv.setImageResource(R.mipmap.cart_select);
                break;
        }
    }

    private void getCrowdShipping(CsAddress.CustomerAddress address) {
        CsShipping.GetCrowdShippingMethodListRequest.Builder builder = CsShipping.GetCrowdShippingMethodListRequest.newBuilder();
        final CrowdOrderInfo mOrderInfo = CrowdCartOrderActivity.mOrderInfo;
        ItemBean itemBean = mOrderInfo.getItemBean();
        AccountManager instance = AccountManager.getInstance();
        builder.setCrowdId(itemBean.getCrowdId())
                .setItemId(itemBean.getItemid())
                .setQty(mOrderInfo.getCount())
                .setUserinfo(instance.getBaseUserRequest())
                .setCurrencycode(instance.getCurrencyCode())
                .setCurrencyid(instance.getCurrencyId())
                .setLocalecode(instance.getLocaleCode());

        if (address != null) {
            builder.setShippingAddressId(address.getAddressId());
        } else {
            return;
        }
        builder.setWarehouseId(mOrderInfo.getWarehouse().getWarehouseId());
//        builder.setWarehouseId(1);
        NetEngine.postRequest(builder, new INetEngineListener<CsShipping.GetCrowdShippingMethodListResponse>() {

            @Override
            public void onSuccess(CsShipping.GetCrowdShippingMethodListResponse response) {

                final List<CsShipping.Shipping> shippingsList = response.getShippingsList();
                if (shippingsList != null) {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            closeLoading();
                           /* crowdPairList.clear();
                            for (int i = 0; i < shippingsList.size(); i++) {
                                CsBase.PairIntInt buildInt = CsBase.PairIntInt.newBuilder().setK(mOrderInfo.getWarehouse().getWarehouseId()).setV(shippingsList.get(i).getShippingId()).build();
                                crowdPairList.add(buildInt);
                            }*/
                            setListAdapter(shippingsList);
                        }
                    });
                }
            }

            @Override
            public void onFailure(int ret, String errMsg) {
            }
        });
    }

    private void setListAdapter(final List<CsShipping.Shipping> shippingsList) {
        mDeliveryCommodityLayout.removeAllViews();
        for (int i = 0; i < shippingsList.size(); i++) {
            CsShipping.Shipping shipping = shippingsList.get(i);
            View inflate = View.inflate(this, R.layout.item_crowd_shipping, null);
//            CheckedTextView checkedTextView = (CheckedTextView) inflate.findViewById(R.id.checked_tv);
            TextView tvName = (TextView) inflate.findViewById(R.id.tv_shipping_name);
            TextView tvInfo = (TextView) inflate.findViewById(R.id.tv_shipping_info);
            TextView tvPrice = (TextView) inflate.findViewById(R.id.tv_price);
            tvName.setText(shipping.getTitle());
            tvInfo.setText(shipping.getInfo());
            tvPrice.setText(UIUtils.getCurrency(this, (float) shipping.getFee()));
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            layoutParams.setMargins(0, UIUtils.dip2px(1), 0, 0);
            mDeliveryCommodityLayout.addView(inflate, layoutParams);
            inflate.setTag(i);
            inflate.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    for (int j = 0; j < shippingsList.size(); j++) {
                        CheckedTextView checkedTextView = (CheckedTextView) v.findViewById(R.id.checked_tv);
                        if (j == (int) v.getTag()) {
                            checkedTextView.setChecked(true);
                        } else {
                            checkedTextView.setChecked(false);
                        }
                    }
                }
            });
            if (i == 0) inflate.callOnClick();
        }
    }


    @OnClick({R.id.title_iv_left, R.id.title_tv_left, R.id.delivery_address_layout,
            R.id.delivery_merge_order_help_iv, R.id.delivery_direct_mail_help_iv,
            R.id.delivery_merge_order_iv, R.id.delivery_direct_mail_iv, R.id.img_arrow})
    public void onClick(View view) {
        Intent intent;
        switch (view.getId()) {
            case R.id.title_iv_left:
                break;
            case R.id.title_tv_left:
                break;
            case R.id.delivery_merge_order_help_iv:
                showDialog(getString(R.string.String_merge_order), getString(R.string.dialog_merge_order_help_msg));
                break;
            case R.id.delivery_direct_mail_help_iv:
                showDialog(getString(R.string.String_direct_mail_1), getString(R.string.dialog_direct_mail_help_msg));
                break;
            case R.id.delivery_merge_order_iv:
                mOrderShippingScheme = CsOrder.ShippingScheme.SHIPPING_SCHEME_MERGE_VALUE;
                showOrderScheme();
                break;
            case R.id.delivery_direct_mail_iv:
                mOrderShippingScheme = CsOrder.ShippingScheme.SHIPPING_SCHEME_DIRECT_VALUE;
                showOrderScheme();
                break;
            case R.id.img_arrow:
                switchItemLayout();
                break;
            case R.id.delivery_address_layout:
                intent = new Intent(this, AddressManagerActivity.class);
                intent.putExtra(AddressManagerActivity.KEY_IS_CHOOSE_TYPE, true);
                startActivityForResult(intent, Constants.ADDRESS_REQUEST_CODE);
                break;
        }
    }

    private void switchItemLayout() {
        if (mLlItemContainer.getChildCount() > 1) {
            for (int i = 1; i < mLlItemContainer.getChildCount(); i++)
                mLlItemContainer.removeViewAt(i);
            mImgArrow.setImageResource(R.mipmap.arrow_down);
        } else {
            showOrderItem();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == Constants.ADDRESS_REQUEST_CODE) {
            if (data != null) {
                CrowdCartOrderActivity.mAddress = (CsAddress.CustomerAddress) data.getExtras().getSerializable("address");
                setAddress(CrowdCartOrderActivity.mAddress);
            }
        }
    }

    private void setAddress(CsAddress.CustomerAddress address) {
        if (address != null) {
            String str = getResources().getString(R.string.String_cart_consignee_msg);
            str = String.format(str, address.getName(), address.getPhone());
            mDeliveryNameAndPhoneTv.setText(str);
            String region = address.getFullRegionName();
            mDeliveryPhoneTv.setText(address.getStreet() + "," + region);
            if (address.getIsDefault()) {
                mDeliveryDefaultAddressIv.setVisibility(View.VISIBLE);
            } else {
                mDeliveryDefaultAddressIv.setVisibility(View.GONE);
            }
        }
        getCrowdShipping(address);
    }

    public void showDialog(String title, String msg) {
        CustomDialog.Builder builder = new CustomDialog.Builder(this);
        builder.setTitle(title);
        builder.setMessage(msg);
        builder.setPositiveButton(getString(R.string.cart_order_dialog_confirm), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                startDDMActivity(ContractServiceActivity.class, true);
//                MeiqiaManager.getInstance(DeliveryActivity.this).contactCustomerService();
            }
        });
        builder.setNegativeButton(getString(R.string.cart_dialog_btn_cancel), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        builder.create().show();
    }
}
