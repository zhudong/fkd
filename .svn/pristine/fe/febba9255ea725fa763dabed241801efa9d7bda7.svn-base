package com.fuexpress.kr.ui.uiutils;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.util.DisplayMetrics;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.SysApplication;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.ui.view.imageselector.ImageConfig;
import com.fuexpress.kr.ui.view.imageselector.ImageSelector;
import com.fuexpress.kr.ui.view.imageselector.ImsDisPlayLoader;
import com.fuexpress.kr.utils.FileUtils;
import com.fuexpress.kr.utils.LogUtils;

import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import cn.pedant.SweetAlert.SweetAlertDialog;

/**
 * Created by Longer on 2016/10/26.
 */
public class UIUtils {
    private static SweetAlertDialog mSweetAlertDialog;

    /**
     * 得到上下文
     */
    public static Context getContext() {
        return SysApplication.getContext();
    }

    /**
     * 得到Resource对象
     */
    public static Resources getResources() {
        Context context = getContext();
        Resources resources = context.getResources();
        LogUtils.e("aaa");
        return getContext().getResources();
    }

    /**
     * 得到String.xml中定义的字符信息
     */
    public static String getString(int resId) {
        return getResources().getString(resId);
    }

    /**
     * 得到String.xml中定义的字符信息,带占位符
     */
    public static String getString(int resId, Object... formatArgs) {
        return getResources().getString(resId, formatArgs);
    }

    /**
     * 得到String.xml中定义的字符数组信息
     */
    public static String[] getStrings(int resId) {
        return getResources().getStringArray(resId);
    }

    /**
     * 得到color.xml中定义的颜色信息
     */
    public static int getColor(int resId) {
        return getResources().getColor(resId);
    }

    /**
     * 得到主线程的线程id
     */
    public static long getMainThreadId() {
        return SysApplication.getMainThreadId();
    }

    /**
     * 得到主线程的一个handler
     */
    public static Handler getMainThreadHandler() {
        return SysApplication.getHandler();
    }

    /**
     * 安全的执行一个任务
     */
    public static void postTaskSafely(Runnable task) {
        // 得到当前的线程
        long curThreadId = android.os.Process.myTid();
        // 得到主线程的线程id
        long mainThreadId = getMainThreadId();
        if (curThreadId == mainThreadId) {
            // 如果当前是在主线程-->直接执行
            task.run();
        } else {
            // 如果当前是在子线程-->通过消息机制,把任务发送到主线程执行
            getMainThreadHandler().post(task);
        }
    }

    public static void postTaskSafelyDelayed(Runnable task, long delayMillis) {
        // 得到当前的线程
        long curThreadId = android.os.Process.myTid();
        // 得到主线程的线程id
        long mainThreadId = getMainThreadId();
        if (curThreadId == mainThreadId) {
            // 如果当前是在主线程-->直接执行
            task.run();
        } else {
            // 如果当前是在子线程-->通过消息机制,把任务发送到主线程执行
            getMainThreadHandler().postDelayed(task, delayMillis);
        }
    }

    /**
     * 得到应用程序的包名
     */
    public static String getPackageName() {
        return getContext().getPackageName();
    }

    /**
     * 根据手机的分辨率从 dp 的单位 转成为 px(像素)
     */
    public static int dip2px(float dpValue) {
        final float scale = SysApplication.getContext().getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }

    /**
     * 根据手机的分辨率从 px(像素) 的单位 转成为 dp
     */
    public static int px2dip(float pxValue) {
        final float scale = SysApplication.getContext().getResources().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }

    //获取屏幕宽度:
    public static int getScreenWidthPixels(Activity activity) {
        //获取屏幕的宽高的像素
        DisplayMetrics dm = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);
        return dm.widthPixels;
    }

    //获取栈顶的activity
    public static String getTopActivity(Activity context) {
        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningTaskInfo> runningTaskInfos = manager.getRunningTasks(1);

        if (runningTaskInfos != null)
            return (runningTaskInfos.get(0).topActivity).getClassName();
        else
            return null;
    }

    public static Bitmap getRoundBitmap(Bitmap bitmap, int roundPx) {
        Paint paint = new Paint();
        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        final int color = 0xff424242;

        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectF = new RectF(rect);
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);
        paint.setColor(color);
        int x = bitmap.getWidth();

        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);
        return output;
    }


    private static long lastClickTime;

    public synchronized static boolean isFastClick() {
        long time = System.currentTimeMillis();
        if (time - lastClickTime < 1000) {
            return true;
        }
        lastClickTime = time;
        return false;
    }


    public static void startImageSelectorForAddItem(int requestCode, ArrayList<String> path, Activity activity, int maxSize) {

        ImageConfig imageConfig
                = new ImageConfig.Builder(
                // GlideLoader 可用自己用的缓存库
                new ImsDisPlayLoader())
                // 如果在 4.4 以上，则修改状态栏颜色 （默认黑色）
                .steepToolBarColor(getResources().getColor(R.color.black))
                        // 标题的背景颜色 （默认黑色）
                .titleBgColor(getResources().getColor(R.color.black))
                        // 提交按钮字体的颜色  （默认白色）
                .titleSubmitTextColor(getResources().getColor(R.color.white))
                        // 标题颜色 （默认白色）
                .titleTextColor(getResources().getColor(R.color.white))
                        // 开启多选   （默认为多选）  (单选 为 singleSelect)
                        //.singleSelect()
                        //.crop()
                        // 多选时的最大数量   （默认 9 张）
                .mutiSelectMaxSize(maxSize)
                        // 已选择的图片路径
                .pathList(path)
                        // 拍照后存放的图片路径（默认 /temp/picture）
                .filePath(FileUtils.getCachePath())
                        // 开启拍照功能 （默认开启）
                .showCamera()
                .requestCode(requestCode)
                .build();

        //Log.e("123", Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/");
        ImageSelector.open(activity, imageConfig);
    }


    public static void startImageSelectorForChangeMerChantCover(int requestCode, ArrayList<String> path, Activity activity) {

        ImageConfig imageConfig
                = new ImageConfig.Builder(
                // GlideLoader 可用自己用的缓存库
                new ImsDisPlayLoader())
                // 如果在 4.4 以上，则修改状态栏颜色 （默认黑色）
                .steepToolBarColor(getResources().getColor(R.color.black))
                        // 标题的背景颜色 （默认黑色）
                .titleBgColor(getResources().getColor(R.color.black))
                        // 提交按钮字体的颜色  （默认白色）
                .titleSubmitTextColor(getResources().getColor(R.color.white))
                        // 标题颜色 （默认白色）
                .titleTextColor(getResources().getColor(R.color.white))
                        // 开启多选   （默认为多选）  (单选 为 singleSelect)
                .singleSelect()
                        //.crop(SysApplication.mWidthPixels, (int) (SysApplication.mWidthPixels / 1.5), SysApplication.mWidthPixels, (int) (SysApplication.mWidthPixels / 1.5))
                        // 多选时的最大数量   （默认 9 张）
                        //.mutiSelectMaxSize(6)
                        // 已选择的图片路径
                .pathList(path)
                        // 拍照后存放的图片路径（默认 /temp/picture）
                .filePath(FileUtils.getCachePath())
                        // 开启拍照功能 （默认开启）
                .showCamera()
                .requestCode(requestCode)
                .isAddDesc(false)
                .build();

        //Log.e("123", Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/");
        ImageSelector.open(activity, imageConfig);
    }


    public static void startImageSelectorForAddItem(int requestCode, ArrayList<String> path, Fragment fragment, int maxSize) {

        ImageConfig imageConfig
                = new ImageConfig.Builder(
                // GlideLoader 可用自己用的缓存库
                new ImsDisPlayLoader())
                // 如果在 4.4 以上，则修改状态栏颜色 （默认黑色）
                .steepToolBarColor(getResources().getColor(R.color.black))
                        // 标题的背景颜色 （默认黑色）
                .titleBgColor(getResources().getColor(R.color.black))
                        // 提交按钮字体的颜色  （默认白色）
                .titleSubmitTextColor(getResources().getColor(R.color.white))
                        // 标题颜色 （默认白色）
                .titleTextColor(getResources().getColor(R.color.white))
                        // 开启多选   （默认为多选）  (单选 为 singleSelect)
                        //.singleSelect()
                        //.crop()
                        // 多选时的最大数量   （默认 9 张）
                .mutiSelectMaxSize(maxSize)
                        // 已选择的图片路径
                .pathList(path)
                        // 拍照后存放的图片路径（默认 /temp/picture）
                .filePath(FileUtils.getCachePath())
                        // 开启拍照功能 （默认开启）
                .showCamera()
                .requestCode(requestCode)
                .build();

        //Log.e("123", Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/");
        ImageSelector.open(fragment, imageConfig);
    }

    public static void startImageSelectorForHeadIcon(int requestCode, ArrayList<String> path, Activity activity) {

        ImageConfig imageConfig
                = new ImageConfig.Builder(
                // GlideLoader 可用自己用的缓存库
                new ImsDisPlayLoader())
                // 如果在 4.4 以上，则修改状态栏颜色 （默认黑色）
                .steepToolBarColor(getResources().getColor(R.color.black))
                        // 标题的背景颜色 （默认黑色）
                .titleBgColor(getResources().getColor(R.color.black))
                        // 提交按钮字体的颜色  （默认白色）
                .titleSubmitTextColor(getResources().getColor(R.color.white))
                        // 标题颜色 （默认白色）
                .titleTextColor(getResources().getColor(R.color.white))
                        // 开启多选   （默认为多选）  (单选 为 singleSelect)
                .singleSelect()
                .crop(1, 1, 140, 140)
                        // 多选时的最大数量   （默认 9 张）
                        //.mutiSelectMaxSize(6)
                        // 已选择的图片路径
                .pathList(path)
                        // 拍照后存放的图片路径（默认 /temp/picture）
                .filePath(FileUtils.getCachePath())
                        // 开启拍照功能 （默认开启）
                .showCamera()
                .requestCode(requestCode)
                .isAddDesc(false)
                .build();

        //Log.e("123", Environment.getExternalStorageDirectory().getAbsolutePath() + "/DCIM/Camera/");
        ImageSelector.open(activity, imageConfig);
    }

    private static int mRealityProgress;
    private static int mSingleMaxSize;

    public static synchronized void setProgress(long bytesWrite, long contentLength, int listSize, Context context, int index) {
        if (mSweetAlertDialog == null) {
            mSweetAlertDialog = new SweetAlertDialog(context, SweetAlertDialog.PROGRESS_TYPE);
            mSweetAlertDialog.getProgressHelper().setBarColor(Color.WHITE);
            mSweetAlertDialog.setCancelable(false);
        }
        mSingleMaxSize = 100 / listSize;
        /*if (0 == index) {
            mRealityProgress = 0;
        }*/
        int pros = (int) ((mSingleMaxSize * bytesWrite) / contentLength);
        mRealityProgress += pros;
        //mSweetAlertDialog.getProgressHelper().setProgress(pros);
        if (listSize - 1 == index) {
            if (mRealityProgress < 100) {
                mRealityProgress = 100;
            }
        }
        mSweetAlertDialog.setTitleText("正在上传:" + mRealityProgress + "%");
        mSweetAlertDialog.show();
        if (listSize - 1 == index) {
            mRealityProgress = 0;
            SysApplication.getHandler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    mSweetAlertDialog.dismiss();
                }
            }, 1000);
        }
    }


    public static float formatNumber(String currencyCode, float num) {
        BigDecimal bd = new BigDecimal(num);
        if (currencyCode.contains("KRW")) {
            bd = bd.setScale(0, BigDecimal.ROUND_HALF_UP);
        } else if (currencyCode.contains("TWD")) {
            bd = bd.setScale(0, BigDecimal.ROUND_HALF_UP);
        } else if (currencyCode.contains("CNY")) {
            bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
        } else {
            bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
        }
        return bd.floatValue();
    }

    public static String getCurrency(Context context, float price) {
        String currencyCode = AccountManager.getInstance().getCurrencyCode();
       /* if (currencyCode.equals("KRW")) {
            NumberFormat nf = NumberFormat.getInstance();
            String ss = nf.format(price);
            return "₩" + ss;
        } else {
            return getCurrency(context, currencyCode, price, 0);
        }*/
        return getCurrency(context, currencyCode, price);
    }

    public static String getCurrency(Context context, String code) {
        InputStreamReader in = null;
        Properties pro = getPro(context, in);
        String currency = pro.getProperty(code);
        return currency;
    }

    public static String getCurrency(Context context) {
        InputStreamReader in = null;
        Properties pro = getPro(context, in);
        String currency = pro.getProperty(AccountManager.getInstance().getCurrencyCode());
        return currency;
    }

    public static String getCurrency(Context context, String currencyCode, float price) {
        return getCurrency(context, currencyCode, price, 0, true);
    }

    /*
    *
    *   type： 1001 直接返回格式数字  0  符号+数字  !0 数字加符号
    *   rounding true 四舍五入  false 不处理
    * */
    public static String getCurrency(Context context, String currencyCode, float price, int type, boolean rounding) {
        InputStreamReader in = null;
        String currency = "";
        AccountManager instance = AccountManager.getInstance();
        if (currency == null || "".equals(currency)) {
            Properties pro = getPro(context, in);
            currency = pro.getProperty(currencyCode);
            if (currency == null) currency = "";
        }

        String formatprice;
        BigDecimal d = new BigDecimal(price);

        if (currencyCode.contains("KRW")) {
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMaximumFractionDigits(0);
            formatprice = getNumberFormat(price, nf, rounding);
        } else if (currencyCode.contains("TWD")) {
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMaximumFractionDigits(0);
            formatprice = getNumberFormat(price, nf, rounding);
        } else {
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMinimumFractionDigits(2);
            nf.setMaximumFractionDigits(2);
            formatprice = getNumberFormat(price, nf, rounding);
            formatprice = hinComma(formatprice);
        }

        if (type == 1001) {
            return formatprice;
        } else if (type != 0) {
            return formatprice + currency;
        } else {
            return currency + formatprice;
        }
    }

    public static String getCurrency(Context context, String currencyCode, float price, int type, int leng) {
        if (leng < 0) {
          /*  leng = 2;*/
            if (price < 1) leng = 5;
            else leng = 4;
        }
      /*  if (leng < 0 && price >= 0.01) {
            leng = 4;
        }*/
//        if (currencyCode.contains("KRW")) leng = 0;
        String formatprice;
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumFractionDigits(leng);
        nf.setMaximumFractionDigits(leng);
        nf.setRoundingMode(RoundingMode.HALF_UP);
        nf.setGroupingUsed(true);
        formatprice = nf.format(price);
        if (type != 0) {
            return formatprice + currencyCode;
        } else {
            return currencyCode + formatprice;
        }
    }


    private static String getNumberFormat(float price, NumberFormat nf, boolean rounding) {
        String formatprice = "";
        if (rounding)
            nf.setRoundingMode(RoundingMode.HALF_UP);
        nf.setGroupingUsed(true);
        formatprice = nf.format(price);

        return formatprice;
    }

    private static String hinComma(String formatprice) {
        return formatprice.replaceAll(",", "");
    }

    private static synchronized Properties getPro(Context context, InputStreamReader in) {
        if (pro != null) {
            return pro;
        }
        try {
            in = new InputStreamReader(context.getAssets().open("currency.properties"));
            pro = new Properties();
            pro.load(in);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return pro;
    }

    private static Properties pro;
}
