package com.fuexpress.kr.ui.activity.my_order;

import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.fuexpress.kr.R;
import com.fuexpress.kr.base.BusEvent;
import com.fuexpress.kr.bean.SalesOrderBean;
import com.fuexpress.kr.model.AccountManager;
import com.fuexpress.kr.model.RedPointCountManager;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.ui.view.RefreshListView;
import com.fuexpress.kr.utils.ClassUtil;
import com.fuexpress.kr.utils.CommonUtils;
import com.socks.library.KLog;

import java.util.ArrayList;
import java.util.List;

import cn.pedant.SweetAlert.SweetAlertDialog;
import de.greenrobot.event.EventBus;
import fksproto.CsBase;
import fksproto.CsOrder;

/**
 * Created by longer on 2017/7/6.
 */

public class OrderAll extends Fragment implements RefreshListView.OnRefreshListener, View.OnClickListener {
    private RefreshListView mRefreshListView;
    private static Handler mHandler = new Handler();
    private int mPageIndex = 1;
    private List<SalesOrderBean> mOrderBeans;
    private List<CsBase.PairIntStr> mUrlsList;
    private boolean mHasMore = true;
    private OrderItemAdapter mAdapter;
    private View mNoOne;
    private SweetAlertDialog mPDialog;
    public final static String BEAN = "bean";
    private TextView mTextView;
    private ImageView mImageView;
    private LinearLayout noLayout;
    private TextView mSelectBtn;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = View.inflate(getContext(), R.layout.fragment_package_items, null);
        mRefreshListView = (RefreshListView) rootView.findViewById(R.id.refresh_lv_package);
        mTextView = (TextView) rootView.findViewById(R.id.infoTv);
        mTextView.setText(getString(R.string.you_have_no_order));
        mImageView = (ImageView) rootView.findViewById(R.id.infoIv);
        mImageView.setImageResource(R.mipmap.gift_card_order_list_empty);
        mSelectBtn = (TextView) rootView.findViewById(R.id.selectBtn);
        mSelectBtn.setOnClickListener(this);
        mSelectBtn.setVisibility(View.VISIBLE);
        mSelectBtn.setText(getString(R.string.buy_now));
        mNoOne = rootView.findViewById(R.id.noLayout);
        rootView.findViewById(R.id.selectBtn).setOnClickListener(this);
        mRefreshListView.setOnRefreshListener(this);
        noLayout = (LinearLayout) rootView.findViewById(R.id.noLayout);
        mUrlsList = new ArrayList<>();
        return rootView;
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        initdata();
    }

    @Override
    public void onResume() {
        super.onResume();
        mPageIndex = 1;
        initdata();
        RedPointCountManager.getOrderCount();
    }

    private void initdata() {
        getOrderList(false);
    }

    protected int getTab() {
        return CsOrder.SalesOrderTab.SALES_ORDER_TAB_NONE_VALUE;
    }

    public void getOrderList(boolean isRefresh) {
        if (mPageIndex == 1 && !isRefresh) {
            showLoading();
            noLayout.setVisibility(View.INVISIBLE);
        }
        KLog.i("getOrderList");
        CsOrder.GetSalesOrderListRequest.Builder builder = CsOrder.GetSalesOrderListRequest.newBuilder();
        builder.setPageno(mPageIndex);
        builder.setTab(getTab());
        builder.setUserinfo(AccountManager.getInstance().getBaseUserRequest());
        NetEngine.postRequest(builder, new INetEngineListener<CsOrder.GetSalesOrderListResponse>() {

            @Override
            public void onSuccess(CsOrder.GetSalesOrderListResponse response) {
                //    KLog.i("success"+response.toString());

                mHasMore = response.getMore();
                if (mPageIndex == 1) {
                    mOrderBeans = ClassUtil.conventSalesOrderList2OrderBeanList(response.getOrdersList());
                    mUrlsList = new ArrayList<>();
                    for (int i = 0; i < response.getOrderVsUrlsCount(); i++) {
                        mUrlsList.add(response.getOrderVsUrls(i));
                    }
                } else {
                    for (CsOrder.SalesOrder salesOrder : response.getOrdersList()) {
                        mOrderBeans.add(ClassUtil.conventSalesOrder2OrderBean(salesOrder));
                    }
                    for (int i = 0; i < response.getOrderVsUrlsCount(); i++) {
                        mUrlsList.add(response.getOrderVsUrls(i));
                    }
                }


                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        closeLoading();
                        noLayout.setVisibility(View.VISIBLE);
                        mRefreshListView.stopRefresh();
                        mRefreshListView.stopLoadMore(true);
                        mRefreshListView.setHasLoadMore(mHasMore);
                        if (mOrderBeans.size() == 0) {
                            mNoOne.setVisibility(View.VISIBLE);
                        } else {
                            mNoOne.setVisibility(View.INVISIBLE);
                        }

                        if (mPageIndex == 1) {
                            mAdapter = new OrderItemAdapter(getActivity(), mOrderBeans, mUrlsList);
                            mRefreshListView.setAdapter(mAdapter);
                        } else {
                            mAdapter.notifyDataSetChanged();
                        }

                        if (mHasMore) {
                            mPageIndex++;
                        }
                    }
                });
            }

            @Override
            public void onFailure(int ret, String errMsg) {

                KLog.i("failure " + " ret = " + ret + " errMsg = " + errMsg + " " + CommonUtils.getErrMsg(ret));
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        closeLoading();
                        noLayout.setVisibility(View.VISIBLE);
                        mRefreshListView.stopRefresh();
                        mRefreshListView.stopLoadMore(true);
                        mRefreshListView.setHasLoadMore(false);
                        if (mPageIndex == 1) {
                            mOrderBeans = new ArrayList<>();
                            mAdapter = new OrderItemAdapter(getActivity(), mOrderBeans, mUrlsList);
                            mRefreshListView.setAdapter(mAdapter);
                        } else {
                            mAdapter.notifyDataSetChanged();
                        }
                        if (mOrderBeans.size() == 0) {
                            mNoOne.setVisibility(View.VISIBLE);
                        } else {
                            mNoOne.setVisibility(View.INVISIBLE);
                        }
                    }
                });
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.selectBtn:
                EventBus.getDefault().post(new BusEvent(BusEvent.GO_CATEGORY_PAGE, null));
                break;
        }

    }


    @Override
    public void onRefresh(RefreshListView refreshListView) {
        mPageIndex = 1;
        getOrderList(true);
    }

    @Override
    public void onLoadMore(RefreshListView refreshListView) {
        if (mHasMore) {
            getOrderList(false);
        }
    }

    protected void closeLoading() {
        if (mPDialog != null && mPDialog.isShowing()) {
            mPDialog.dismiss();
        }
    }

    protected void showLoading() {
        if (mPDialog == null) {
            mPDialog = new SweetAlertDialog(this.getActivity(), SweetAlertDialog.PROGRESS_TYPE);
        }
        mPDialog.getProgressHelper().setBarColor(Color.parseColor("#ffffff"));
        mPDialog.setCancelable(false);
        mPDialog.show();
    }
}
