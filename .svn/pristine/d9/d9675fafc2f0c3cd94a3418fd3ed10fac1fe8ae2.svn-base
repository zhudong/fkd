package com.fuexpress.kr.model;

import com.fuexpress.kr.base.BusEvent;
import com.fuexpress.kr.net.INetEngineListener;
import com.fuexpress.kr.net.NetEngine;
import com.fuexpress.kr.utils.LogUtils;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.event.EventBus;
import staffproto.CsCard;
import staffproto.CsMy;

/**
 * Created by Longer on 2016/11/1.
 */
public class BalanceManager {
    private static BalanceManager sBalanceManager = new BalanceManager();

    public List<CsCard.GiftCardBalanceList> mGiftCardBalanceLists;
    public float mGiftcardaccount;
    public float mFrozenamount;
    public List<CsCard.GiftCardOrderItem> mGiftcarditemsList01;
    public int mPendingOrderNum_01;

    private BalanceManager() {

    }

    public static BalanceManager getInstance() {
        return sBalanceManager;
    }


    public void getBalanceRequest() {
        CsMy.GetAccountBalanceRequest.Builder builder = CsMy.GetAccountBalanceRequest.newBuilder();

        builder.setUin(AccountManager.getInstance().mUin);

        NetEngine.postRequest(builder, new INetEngineListener<CsMy.GetAccountBalanceResponse>() {

            @Override
            public void onSuccess(CsMy.GetAccountBalanceResponse response) {
                LogUtils.e(response.toString());
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                LogUtils.e("请求账户余额失败:" + ret + " " + errMsg);
            }
        });
    }


    /**
     * 获得充值卡账户的数据
     */
    public void giftCardBalanceListRequest(final int uin) {
        CsCard.GiftCardBalanceListRequest.Builder builder = CsCard.GiftCardBalanceListRequest.newBuilder();
        builder.setUin(uin);
        NetEngine.postRequest(builder, new INetEngineListener<CsCard.GiftCardBalanceListReponse>() {


            @Override
            public void onSuccess(CsCard.GiftCardBalanceListReponse response) {
                //LogUtils.e("请求充值卡成功:" + response.toString());
                mGiftCardBalanceLists = new ArrayList<>();
                //mGiftCardBalanceLists.addAll(response.getListList());
                mGiftcardaccount = response.getGiftcardaccount();
                mFrozenamount = response.getFrozenamount();
                giftCardBalanceListAjaxRequest(uin, 1);
                //int size = mGiftCardBalanceLists.size();
                //EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_BAN_LIST_INIT_SUCCESS, true, size));
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                //LogUtils.e("请求充值卡失败:" + ret + " " + errMsg);
                EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_BAN_LIST_INIT_SUCCESS, false));
            }
        });
    }


    /**
     * 请求充值卡账户的列表方法
     */
    public void giftCardBalanceListAjaxRequest(int uin, final int page) {
        CsCard.GiftCardBalanceListAjaxRequest.Builder builder = CsCard.GiftCardBalanceListAjaxRequest.newBuilder();
        builder.setUin(uin);
        builder.setPage(page);

        NetEngine.postRequest(builder, new INetEngineListener<CsCard.GiftCardBalanceListAjaxReponse>() {

            @Override
            public void onSuccess(CsCard.GiftCardBalanceListAjaxReponse response) {
                //LogUtils.e("我是充值卡账户的列表请求更多成功:" + response.toString());
                mGiftCardBalanceLists.addAll(response.getListList());
                String status = response.getStatus();
                int size = response.getListList().size();
                boolean isHasMore = false;
                if ("more".equals(status)) {
                    isHasMore = true;
                }
                //int listCount = response.getListCount();
                //LogUtils.e("这是listCount:" + listCount);
                if (page != 1) {
                    EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_LIST_MORE_COMPLETE, true, isHasMore));
                } else {
                    EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_BAN_LIST_INIT_SUCCESS, true, isHasMore));
                }
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                //LogUtils.e("我是充值卡账户的列表请求更多失败" + " " + ret + errMsg);
                EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_LIST_MORE_COMPLETE, false));
            }
        });
    }


    public void getGiftCardOrderListRequest(final int orderType, final int statusType, int pageNum, final int status) {
        CsCard.GetGiftCardOrderListRequest.Builder builder = CsCard.GetGiftCardOrderListRequest.newBuilder();
        builder.setPageno(pageNum);
        builder.setOrderType(orderType);
        builder.setStatusType(statusType);
        builder.setUin(AccountManager.getInstance().mUin);
        NetEngine.postRequest(builder, new INetEngineListener<CsCard.GetGiftCardOrderListReponse>() {
            @Override
            public void onSuccess(CsCard.GetGiftCardOrderListReponse response) {
                boolean more = response.getMore();
                if (0 == status) {
                    mGiftcarditemsList01 = new ArrayList<CsCard.GiftCardOrderItem>();
                }

                mGiftcarditemsList01.addAll(response.getGiftcarditemsList());
                mPendingOrderNum_01 = response.getPendingOrderNum();

                //LogUtils.e("我是请求充值卡订单列表的方法,我成功了" + response.toString());
                EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_LIST_REQUEST_COMPLETE, true, more, status));
            }

            @Override
            public void onFailure(int ret, String errMsg) {
                //LogUtils.e("我是请求充值卡订单列表的方法,我失败了:" + ret + " " + errMsg);
                EventBus.getDefault().post(new BusEvent(BusEvent.GET_GIFT_CARD_LIST_REQUEST_COMPLETE, false, status));
            }
        });
    }
}
