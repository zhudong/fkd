package com.fuexpress.kr.model;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.fuexpress.kr.bean.CityBean;
import com.fuexpress.kr.bean.CountryBean;
import com.fuexpress.kr.bean.ProvinceBean;
import com.fuexpress.kr.conf.AddressDBHelper;
import com.fuexpress.kr.utils.LogUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Longer on 2017/2/28.
 * 地址数据库的Dao操作类
 * 增删改查等
 */
public class AddressDao {

    static private AddressDBHelper sAddressDBHelper;
    private static AddressDao sAddressDao;

    private AddressDao() {

    }

    public static AddressDao getInstance(Context context) {
        if (sAddressDao == null) {
            sAddressDao = new AddressDao();
            sAddressDBHelper = new AddressDBHelper(context, null, null, 0);
        }
        return sAddressDao;
    }


    /**
     * 插入国家表的方法
     *
     * @param countryCode 国家码
     * @param countryName 国家名
     */
    public void insertCountry(String countryCode, String countryName) {
        ContentValues contentValues = new ContentValues();
        SQLiteDatabase writableDatabase = sAddressDBHelper.getWritableDatabase();
        /*contentValues.put(AddressDBHelper.CountryTable.COUNTRY_CODE, countryCode);
        contentValues.put(AddressDBHelper.CountryTable.COUNTRY_NAME, countryName);
        writableDatabase.insert(AddressDBHelper.CountryTable.TABLE_NAME, null, contentValues);
        contentValues.put(AddressDBHelper.regionTable.REGION_CODE, countryCode);*/
        contentValues.put(AddressDBHelper.regionTable.REGION_NAME, countryName);
        contentValues.put(AddressDBHelper.regionTable.REGION_CODE, countryCode);
        contentValues.put(AddressDBHelper.regionTable.IS_COUNTRY, 1);
        writableDatabase.insert(AddressDBHelper.regionTable.TABLE_NAME, null, contentValues);
    }

    /**
     * 插入省份的方法
     *
     * @param countryCode  国家码
     * @param provinceCode 省码
     * @param provinceName 省名
     */
    public void insertProvince(String countryCode, String provinceCode, String provinceName) {
        ContentValues contentValues = new ContentValues();
        SQLiteDatabase writableDatabase = sAddressDBHelper.getWritableDatabase();
        /*contentValues.put(AddressDBHelper.ProvinceTable.COUNTRY_CODE, countryCode);
        contentValues.put(AddressDBHelper.ProvinceTable.PROVINCE_CODE, provinceCode);
        contentValues.put(AddressDBHelper.ProvinceTable.PROVINCE_NAME, provinceName);
        writableDatabase.insert(AddressDBHelper.ProvinceTable.TABLE_NAME, null, contentValues);*/
        contentValues.put(AddressDBHelper.regionTable.REGION_CODE, provinceCode);
        contentValues.put(AddressDBHelper.regionTable.REGION_NAME, provinceName);
        contentValues.put(AddressDBHelper.regionTable.IS_PROVINCE, 1);
        contentValues.put(AddressDBHelper.regionTable.COUNTRY_CODE, countryCode);
        writableDatabase.insert(AddressDBHelper.regionTable.TABLE_NAME, null, contentValues);
    }

    /**
     * 插入城市的方法
     *
     * @param countryCode  国家码
     * @param provinceCode 省码
     * @param cityCode     城市码
     * @param cityName     城市名
     */
    public void insertCity(String countryCode, String provinceCode, String cityCode, String cityName) {
        ContentValues contentValues = new ContentValues();
        SQLiteDatabase writableDatabase = sAddressDBHelper.getWritableDatabase();
        /*contentValues.put(AddressDBHelper.CityTable.COUNTRY_CODE, countryCode);
        contentValues.put(AddressDBHelper.CityTable.PROVINCE_CODE, provinceCode);
        contentValues.put(AddressDBHelper.CityTable.CITY_CODE, cityCode);
        contentValues.put(AddressDBHelper.CityTable.CITY_NAME, cityName);
        writableDatabase.insert(AddressDBHelper.CityTable.TABLE_NAME, null, contentValues);*/
        contentValues.put(AddressDBHelper.regionTable.IS_CITY, 1);
        contentValues.put(AddressDBHelper.regionTable.PROVINCE_CODE, provinceCode);
        contentValues.put(AddressDBHelper.regionTable.REGION_CODE, cityCode);
        contentValues.put(AddressDBHelper.regionTable.REGION_NAME, cityName);
        writableDatabase.insert(AddressDBHelper.regionTable.TABLE_NAME, null, contentValues);
    }

    /**
     * 得出数据中所有的国家信息
     *
     * @return 国家的信息列表
     */
    public List<CountryBean> getAllCountryData() {
        SQLiteDatabase readableDatabase = sAddressDBHelper.getReadableDatabase();

        String[] columns = new String[]{
                AddressDBHelper.regionTable.REGION_CODE,
                AddressDBHelper.regionTable.REGION_NAME
        };

        Cursor query = readableDatabase.query(AddressDBHelper.regionTable.TABLE_NAME, columns, AddressDBHelper.regionTable.IS_COUNTRY + "=1", null, null, null, null);

        List<CountryBean> countryBeanList = new ArrayList<>();
        while (query.moveToNext()) {
            LogUtils.e("国家code:" + query.getString(0) + " " + "国家Name:" + query.getString(1));
            CountryBean countryBean = new CountryBean();
            countryBean.setCountryCode(query.getString(0));
            countryBean.setCountryName(query.getString(1));
            countryBeanList.add(countryBean);
        }
        query.close();
        readableDatabase.close();
        return countryBeanList;
    }

    /**
     * 获得特定国家的所有省份
     *
     * @param countryCode 国家码
     * @return 省份列表
     */
    public List<ProvinceBean> getProvincesData(String countryCode) {
        SQLiteDatabase readableDatabase = sAddressDBHelper.getReadableDatabase();
        String[] columns = new String[]{
                //AddressDBHelper.regionTable.COUNTRY_CODE,
                AddressDBHelper.regionTable.REGION_CODE,
                AddressDBHelper.regionTable.REGION_NAME,
        };

        Cursor query = readableDatabase.query(AddressDBHelper.regionTable.TABLE_NAME, columns,
                AddressDBHelper.regionTable.COUNTRY_CODE + "=? and " + AddressDBHelper.regionTable.IS_PROVINCE + "=1", new String[]{countryCode},
                null, null, null);
        List<ProvinceBean> provinceBeanList = new ArrayList<>();
        while (query.moveToNext()) {
            ProvinceBean provinceBean = new ProvinceBean();
            //provinceBean.setCountryCode(query.getString(0));
            provinceBean.setProvinceCode(query.getString(0));
            provinceBean.setProvinceName(query.getString(1));
            provinceBeanList.add(provinceBean);

            //LogUtils.e("这是省的Code:" + query.getString(0) + "省Name:" + query.getString(1));
        }
        query.close();
        readableDatabase.close();
        return provinceBeanList;
    }

    /**
     * 获得特定省份的城市列表
     *
     * @param provinceCode 省份Code
     * @return 特定省份下的城市列表
     */
    public List<CityBean> getCitysData(String provinceCode) {
        SQLiteDatabase readableDatabase = sAddressDBHelper.getReadableDatabase();
        String[] columns = new String[]{
                AddressDBHelper.regionTable.PROVINCE_CODE,
                AddressDBHelper.regionTable.REGION_CODE,
                AddressDBHelper.regionTable.REGION_NAME
        };
        Cursor query = readableDatabase.query(AddressDBHelper.regionTable.TABLE_NAME, columns,
                AddressDBHelper.regionTable.PROVINCE_CODE + "=? and " + AddressDBHelper.regionTable.IS_CITY + "=1", new String[]{provinceCode},
                null, null, null);
        List<CityBean> cityBeanList = new ArrayList<>();
        while (query.moveToNext()) {
            LogUtils.e("pCode:" + query.getString(0) + "cityCode:"
                    + query.getString(1) + "cityName:" + query.getString(2));
            CityBean cityBean = new CityBean();
            cityBean.setProvinceCode(query.getString(0));
            cityBean.setCityCode(query.getString(1));
            cityBean.setCityName(query.getString(2));
            cityBeanList.add(cityBean);
        }
        query.close();
        readableDatabase.close();
        return cityBeanList;
    }

    /**
     * 根据传入来的地区名字来寻找其地区码
     *
     * @param locationName 地区名
     * @return 其地区码
     */
    /*public String getRegoinCode(String locationName) {

    }*/


}
