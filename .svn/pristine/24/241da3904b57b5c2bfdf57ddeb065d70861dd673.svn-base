package com.fuexpress.kr.ui.activity.help_signed.data;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;


import com.fuexpress.kr.conf.Constants;

import com.google.common.annotations.VisibleForTesting;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import fksproto.CsBase;
import fksproto.CsParcel;
import rx.Observable;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.schedulers.Schedulers;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Created by Longer on 2016/12/8.
 * 用来管理帮我收数据的仓库类,是将远程和本地的数据源来整合储存的地方
 * 其实就是将本地和网上的数据集中储存在内存中的仓库类
 * 可以当这个就是MVP的Model层
 * 这个仓库类需要实现数据源接口,来对现有的本地Or网络数据来进行管理(在本地中(更多是数据库),增删改查)
 */
public class HelpSingedDataRepository implements HelpSignedDataSource {

    @NonNull
    private final HelpSignedLocalDataSource mHelpSignedLocalDataSource;//本地数据源的实体对象,不可为空不可修改

    @Nullable
    private HelpSignedRemoteDataSource mHelpSignedRemoteDataSource;//网络数据源的实体对象,不可为空不可修改

    @Nullable
    private static HelpSingedDataRepository INSTANCE = null;

    @VisibleForTesting
    @Nullable
    List<CsParcel.ProductDataList> mProductDataCacheLists;

    @Nullable
    ArrayMap<Integer, ArrayList<String>> mImageIndexDataMap;//集合下标和图片本地路径的map集合

    @Nullable
    ArrayMap<Integer, ArrayMap<String, String>> mImageUpLoadUrlMap;//集合下标和图片上传完成后的url的map集合


    @Nullable
    ArrayMap<String, CsBase.Warehouse> mWarehouseArrayMap;//用来保存仓库信息的map,和仓库id一一对应

    //该Map集合保存了所有已经上传好的图片的路径
    private ArrayMap<String, String> mAddImageUpLoadUrlMap;

    private ArrayMap<Integer, Boolean> mIsIndexCompleteUpLoadMap;//用来储存特定下标下上传图片是否完成的Map

    private List<HelpMeSingleBean> mHelpSingleBeanList;//用来储存帮我寄系列参数的BeanList;

    private List<String> mShouldUpLoadImagePathList;//需要上传的图片


    private HelpSingedDataRepository(@NonNull HelpSignedLocalDataSource helpSignedLocalDataSource) {//
        mHelpSignedLocalDataSource = checkNotNull(helpSignedLocalDataSource, "Local Data Is NotNull!");
        //initImageUrlState();
        //initBeanListData();
    }

    public static HelpSingedDataRepository getInstance(@NonNull HelpSignedLocalDataSource helpSignedLocalDataSource) {
        if (INSTANCE == null)
            INSTANCE = new HelpSingedDataRepository(helpSignedLocalDataSource);
        return INSTANCE;
    }

    /**
     * 设置远程数据对象
     *
     * @param helpSignedRemoteDataSource 远程数据对象
     */
    public void setHelpSignedRemoteDataSource(@NonNull HelpSignedRemoteDataSource helpSignedRemoteDataSource) {
        mHelpSignedRemoteDataSource = helpSignedRemoteDataSource;
        mHelpSingleBeanList.add(mHelpSignedRemoteDataSource.getHelpMeSingleBean());
    }

    public void clearRemoteData() {//清空远程数据对象
        mHelpSignedRemoteDataSource = null;
    }

    void initImageUrlState() {
        List<HelpMeSingleBean> helpMeSingleBeans = mHelpSignedLocalDataSource.getHelpMeSingleBeans();
        for (int i = 0; i < helpMeSingleBeans.size(); i++) {
            getIsIndexCompleteUpLoadMap().put(i, helpMeSingleBeans.get(i).isUrlReady());
        }
    }

    public void initBeanDataList() {
        Observable.just(Constants.USER_INFO.HELP_SIGNED_DATA).map(new Func1<String, List<HelpMeSingleBean>>() {
            @Override
            public List<HelpMeSingleBean> call(String s) {
                return mHelpSignedLocalDataSource.getLoaclDataBeanList(s);
            }
        }).subscribeOn(Schedulers.io()).subscribe(new Action1<List<HelpMeSingleBean>>() {
            @Override
            public void call(List<HelpMeSingleBean> list) {
                if (list != null)
                    processsBeanListData(list);
            }
        });
    }

    public void processsBeanListData(List<HelpMeSingleBean> helpMeSingleBeans) {//初始化BeanList的数据
        for (int i = 0; i < helpMeSingleBeans.size(); i++) {
            HelpMeSingleBean helpMeSingleBean = helpMeSingleBeans.get(i);
            List<String> imagePathLit = helpMeSingleBean.getShowImgList();
            ArrayMap<String, String> pathUrlMap = helpMeSingleBean.getPathUrlMap();
            getIsIndexCompleteUpLoadMap().put(i, !pathUrlMap.containsValue(""));
            Iterator<String> iterator = imagePathLit.iterator();
            while (iterator.hasNext()) {
                String path = iterator.next();
                if (!new File(path).exists()) {//判断是否存在该文件
                    if (!path.contains("http://")) {
                        iterator.remove();//不存在,移除
                        pathUrlMap.remove(path);//同时移除其url键值对
                    } else {
                        ArrayMap<String, String> allImageUpLoadUrlArrayMap = getAllImageUpLoadUrlArrayMap();
                        allImageUpLoadUrlArrayMap.put(path, path);
                    }
                } else {
                    String url = pathUrlMap.get(path);
                    if (TextUtils.isEmpty(url)) {//是文件,url是空的,说明这个path是需要上传
                        // TODO: 2016/12/29 把需要上传的图片保存起来
                        getShouldUpLoadImagePathList().add(path);
                    } else {//是文件,同时url是有的,那么就说明不需要上传
                        ArrayMap<String, String> allImageUpLoadUrlArrayMap = getAllImageUpLoadUrlArrayMap();
                        allImageUpLoadUrlArrayMap.put(path, url);
                    }
                }
            }
        }
    }

    @Override
    public List<CsParcel.ProductDataList> getHelpSignedDataList() {
        if (mProductDataCacheLists != null) {
            return mProductDataCacheLists;
        } else {
            mProductDataCacheLists = new ArrayList<>();
            mProductDataCacheLists.addAll(mHelpSignedLocalDataSource.getHelpSignedDataList());
        }
        return mProductDataCacheLists;
    }

    @Override
    public CsParcel.ProductDataList getHelpSignedDataOnly(int index) {
        if (mProductDataCacheLists != null)
            return mProductDataCacheLists.get(index);
        else
            return null;
    }

    @Override
    public void saveHelpSignedData(@NonNull CsParcel.ProductDataList helpSignedData) {
        if (mProductDataCacheLists == null)
            mProductDataCacheLists = new ArrayList<>();
        mProductDataCacheLists.add(helpSignedData);
    }

    @Override
    public boolean deleteHelpSignedData(int index) {
        boolean isSuccess = false;
        if (mProductDataCacheLists != null) {
            /*Iterator<CsParcel.ProductDataList> iterator = mProductDataCacheLists.iterator();
            CsParcel.ProductDataList productDataList = mProductDataCacheLists.get(index);
            int deleteHashCode = productDataList.hashCode();
            while (iterator.hasNext()) {
                if (iterator.next().hashCode() == deleteHashCode) {
                    iterator.remove();
                }
            }*/
            if (mProductDataCacheLists.size() != 1) {//至少需要一个需求单
                mProductDataCacheLists.remove(index);//这里会产生一个隐患,就是在遍历中不能修改集合，又因这个集合在上传时才会遍历，所以这里我们在上传时进行限制操作即可
                isSuccess = true;
            }

        }
        //mProductDataCacheLists.remove(index);
        return isSuccess;
    }

    @Override
    public void deletAllHelpSignedData() {
        Iterator<CsParcel.ProductDataList> iterator = checkNotNull(mProductDataCacheLists.iterator());
        while (iterator.hasNext()) {
            iterator.remove();
        }
        //mProductDataCacheLists = new ArrayList<>();
        mImageIndexDataMap = new ArrayMap<>();
        //mImageUpLoadUrlMap = new ArrayMap<>();
        mProductDataCacheLists.add(CsParcel.ProductDataList.newBuilder().build());//清除完数据后再添加一个即可
    }

    @Override
    public void refreshHelpSignedData() {//刷新数据,暂时没用

    }

    @Override
    public void editHelpSignedData(int index, @NonNull CsParcel.ProductDataList helpSignedData) {
        if (mProductDataCacheLists != null)
            mProductDataCacheLists.set(index, helpSignedData);
    }

    /**
     * Used to force {@link #getInstance(HelpSignedLocalDataSource)}
     * to
     * create a new
     * instance
     * next time it's called.
     */
    public static void destroyInstance() {
        INSTANCE = null;
    }


    public ArrayMap<Integer, ArrayList<String>> getImageIndexArrayMap() {//获取图片本地路径和索引的Map集合,跟集合的索引一一对应
        if (mImageIndexDataMap == null) {
            mImageIndexDataMap = new ArrayMap<>();
            initImageUrlState();
        }
        return mImageIndexDataMap;
    }

    public ArrayMap<Integer, ArrayMap<String, String>> getImageUpLoadUrlArrayMap() {//获取图片上传完成后的url和索引的Map集合,跟集合索引一一对应
        if (mImageUpLoadUrlMap == null)
            mImageUpLoadUrlMap = new ArrayMap<>();
        return mImageUpLoadUrlMap;
    }

    public ArrayMap<String, String> getAllImageUpLoadUrlArrayMap() {//获取图片上传完成后的url和索引的Map集合
        if (mAddImageUpLoadUrlMap == null)
            mAddImageUpLoadUrlMap = new ArrayMap<>();
        return mAddImageUpLoadUrlMap;
    }

    public void saveWareHouseData(String wareHouseID, CsBase.Warehouse warehouse) {//暂时保存仓库信息在本地
        if (mWarehouseArrayMap == null)
            mWarehouseArrayMap = new ArrayMap<>();
        mWarehouseArrayMap.put(wareHouseID, warehouse);

    }

    public CsBase.Warehouse getWareHouseData(String wareHouseID) {//根据仓库ID获得仓库信息
        if (!TextUtils.isEmpty(wareHouseID)) {
            if (mWarehouseArrayMap != null)
                return mWarehouseArrayMap.get(wareHouseID);
            else
                return null;
        } else
            return null;
    }


    public ArrayMap<Integer, Boolean> getIsIndexCompleteUpLoadMap() {//获得特定下标下图片是否上传完成的Map集合
        if (mIsIndexCompleteUpLoadMap == null)
            mIsIndexCompleteUpLoadMap = new ArrayMap<>();
        return mIsIndexCompleteUpLoadMap;
    }

    public List<HelpMeSingleBean> getHelpSingleBeanList() {//获得Bean数据列表
        if (mHelpSingleBeanList == null) {
            mHelpSingleBeanList = new ArrayList<>();
            mHelpSingleBeanList.addAll(mHelpSignedLocalDataSource.getHelpMeSingleBeans());
        }
        return mHelpSingleBeanList;
    }

    public void addHelpSingleBean(HelpMeSingleBean helpMeSingleBean) {//添加Bean数据到列表中
        if (mHelpSingleBeanList == null)
            mHelpSingleBeanList = new ArrayList<>();
        mHelpSingleBeanList.add(helpMeSingleBean);
    }

    public void modifyHelpSingleBean(int index, HelpMeSingleBean helpMeSingleBean) {//修改Bean数据
        if (mHelpSingleBeanList != null) {
            if (mHelpSingleBeanList.size() > 0) {//假如本地有数据保存
                HelpMeSingleBean localHelpMeSingleBean = mHelpSingleBeanList.get(0);//取出第一位
                String currency_code = localHelpMeSingleBean.getCurrency_Code();//取出货币Code
                if (!TextUtils.isEmpty(currency_code)) {//在货币Code不为空的情况下
                    if (!currency_code.equals(helpMeSingleBean.getCurrency_Code())) {//假如正在仓库中的货币Code跟需要保存的不一致,则清空
                        mHelpSingleBeanList.clear();
                        addHelpSingleBean(helpMeSingleBean);
                    } else {
                        mHelpSingleBeanList.set(index, helpMeSingleBean);
                    }
                }
            }
        }
        saveBeanDataToLoacl();
    }

    public void reMoveHelpSingleBean(int index) {//删除
        if (mHelpSingleBeanList != null) {
            mHelpSingleBeanList.remove(index);
            saveBeanDataToLoacl();
        }
    }

    public HelpMeSingleBean getHelpMeSingleBeanOnly(int index) {//获得单个Bean数据
        if (mHelpSingleBeanList != null)
            return mHelpSingleBeanList.get(index);
        else
            return null;
    }

    //清空所有的信息
    public void clearAllHelpSingleBeanData() {
        mHelpSingleBeanList.clear();
        if (mHelpSignedRemoteDataSource != null)
            clearRemoteData();
    }

    //把数据保存到本地的方法
    public void saveBeanDataToLoacl() {
        mHelpSignedLocalDataSource.saveDataToLoacl(getHelpSingleBeanList());
    }

    public List<String> getShouldUpLoadImagePathList() {
        if (mShouldUpLoadImagePathList == null)
            mShouldUpLoadImagePathList = new ArrayList<>();
        return mShouldUpLoadImagePathList;
    }

    @Nullable
    public HelpSignedRemoteDataSource getHelpSignedRemoteDataSource() {
        return mHelpSignedRemoteDataSource;
    }
}
